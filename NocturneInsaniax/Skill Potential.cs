using MelonLoader;
using HarmonyLib;
using Il2Cpp;
using Il2Cppnewdata_H;
using Il2Cppnewbattle_H;
using Il2Cppresult2_H;
using Il2Cppfacility_H;
using Il2Cpplibsdf_H;
using System;
using Il2CppTMPro;
using System.Text.RegularExpressions;
using UnityEngine;

namespace NocturneInsaniax
{
    internal partial class NocturneInsaniax : MelonMod
    {
        private static sbyte[][] demonPotentials = new sbyte[][]
        {
            //          {Phys , Fire , Ice  , Elec , Force, Alm  , Light, Dark , Curse, Nerve, Mind , SD   , N/A  , Heal , Supp , Util}
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 000
            new sbyte[] {5    , -5   , 0    , 0    , 0    , 5    , 7    , 7    , 0    , 0    , 0    , 5    , 0    , 4    , -3   , 0 }, // 001 Vishnu
            new sbyte[] {0    , 0    , 0    , 0    , -6   , 3    , 6    , 6    , 0    , 0    , 0    , 3    , 0    , 3    , 0    , 0 }, // 002 Mitra
            new sbyte[] {0    , 6    , -4   , -4   , 0    , 0    , 6    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 0 }, // 003 Amaterasu
            new sbyte[] {4    , 0    , 2    , 6    , -7   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 004 Odin
            new sbyte[] {5    , 0    , 0    , 0    , 0    , 0    , 3    , 3    , -4   , 0    , -4   , 0    , 0    , 0    , 0    , 0 }, // 005 Atavaka
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 2    , 4    , -4   , -4   , 0    , 0    , 0    , 0    , 2    , 2    , 0 }, // 006 Horus
            new sbyte[] {-5   , 0    , 0    , 0    , 0    , 0    , 5    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 3    , 0 }, // 007 Lakshmi
            new sbyte[] {3    , 0    , 0    , -5   , 6    , 0    , 0    , 0    , 3    , 0    , 0    , 0    , 0    , 3    , 0    , 0 }, // 008 Scathach
            new sbyte[] {0    , -4   , 0    , 0    , 4    , 0    , 0    , 0    , 2    , 2    , 2    , 0    , 0    , 0    , 2    , 0 }, // 009 Sarasvati
            new sbyte[] {0    , 5    , -5   , 0    , 0    , 3    , 0    , -5   , -5   , 0    , 3    , 3    , 0    , 3    , 0    , 0 }, // 010 Sati
            new sbyte[] {-3   , 0    , 0    , -3   , 2    , 0    , 2    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 0 }, // 011 Ame-no-Uzume
            new sbyte[] {7    , 5    , -5   , 5    , 0    , 7    , 0    , 0    , -5   , -5   , -5   , 7    , 0    , -3   , 4    , 0 }, // 012 Shiva
            new sbyte[] {4    , 0    , 0    , 0    , 0    , 0    , 5    , 5    , 0    , 0    , 0    , 0    , 0    , 0    , -3   , 0 }, // 013 Beidou Xingjun
            new sbyte[] {7    , 0    , 0    , 0    , 0    , 0    , 0    , -5   , 0    , 0    , 0    , 0    , 0    , -3   , 2    , 0 }, // 014 Qitian Dasheng
            new sbyte[] {3    , 3    , -4   , 0    , 0    , 3    , 0    , 0    , 4    , 0    , 4    , 3    , 0    , 0    , 0    , 0 }, // 015 Dionysus
            new sbyte[] {6    , 6    , -5   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -3   , 0 }, // 016 Kali
            new sbyte[] {5    , 0    , 7    , -7   , 0    , 0    , 0    , 0    , 5    , 0    , 0    , 0    , 0    , 2    , 0    , 0 }, // 017 Skadi
            new sbyte[] {0    , 4    , -5   , 0    , 0    , 3    , 6    , -5   , 0    , 0    , 0    , 3    , 0    , 4    , 3    , 0 }, // 018 Parvati
            new sbyte[] {-3   , 0    , 0    , 0    , 0    , 0    , 4    , -5   , 0    , 0    , 0    , 0    , 0    , 4    , 2    , 0 }, // 019 Kushinada
            new sbyte[] {-3   , -5   , 0    , 0    , 0    , 0    , 2    , 0    , 0    , 0    , 2    , 0    , 0    , 3    , 2    , 0 }, // 020 Kikuri-Hime
            new sbyte[] {6    , 6    , -4   , 0    , 0    , 6    , 3    , 0    , 0    , 0    , 0    , 6    , 0    , 0    , 3    , 0 }, // 021 Bishamonten
            new sbyte[] {5    , 0    , 0    , 7    , -7   , 0    , 0    , 0    , -3   , -3   , -3   , 0    , 0    , 0    , 2    , 0 }, // 022 Thor
            new sbyte[] {4    , -5   , 4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0 }, // 023 Jikokuten
            new sbyte[] {5    , 0    , 0    , 5    , -5   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 024 Take-Mikazuchi
            new sbyte[] {3    , 3    , -5   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0    , 0 }, // 025 Okuninushi
            new sbyte[] {4    , 0    , 0    , -4   , 4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0 }, // 026 Koumokuten
            new sbyte[] {4    , 0    , 0    , 0    , -4   , 0    , 4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 027 Zouchouten
            new sbyte[] {2    , -3   , 0    , 4    , 0    , 0    , 0    , 0    , 0    , -1   , -1   , 0    , 0    , 0    , 0    , 0 }, // 028 Take-Minakata
            new sbyte[] {5    , 5    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -6   , 0    , 0    , 0    , -2   , 2    , 0 }, // 029 Chimera
            new sbyte[] {3    , -6   , 3    , 5    , -3   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 030 Baihu
            new sbyte[] {-3   , -3   , 0    , 0    , 4    , 0    , 0    , -3   , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 0 }, // 031 Senri
            new sbyte[] {0    , 5    , -6   , 2    , 0    , 0    , 0    , 0    , 1    , 1    , 1    , 0    , 0    , 0    , 1    , 0 }, // 032 Zhuque
            new sbyte[] {1    , -3   , 0    , 3    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 033 Shiisaa
            new sbyte[] {4    , 0    , 4    , 0    , -5   , 0    , 0    , 0    , 0    , -5   , -5   , 0    , 0    , 2    , 0    , 0 }, // 034 Xiezhai
            new sbyte[] {3    , 0    , 0    , -3   , 0    , 0    , 3    , -3   , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 0 }, // 035 Unicorn
            new sbyte[] {0    , 3    , -4   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 0    , 0 }, // 036 Flaemis
            new sbyte[] {0    , -4   , 3    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 0 }, // 037 Aquans
            new sbyte[] {0    , 0    , 0    , -4   , 3    , 0    , 0    , 0    , 1    , 1    , 1    , 0    , 0    , 0    , 0    , 0 }, // 038 Aeros
            new sbyte[] {0    , 0    , 0    , 3    , -4   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 0 }, // 039 Erthys
            new sbyte[] {-3   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 0 }, // 040 Saki Mitama
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 041 Kushi Mitama
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 042 Nigi Mitama
            new sbyte[] {2    , -3   , -3   , -3   , -3   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 043 Ara Mitama
            new sbyte[] {0    , 6    , -7   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 044 Efreet
            new sbyte[] {4    , 0    , 0    , -6   , 4    , 0    , 0    , 0    , 3    , 3    , 3    , 0    , 0    , 0    , 0    , 0 }, // 045 Pulukishi
            new sbyte[] {4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -4   , -4   , -4   , 0    , 0    , 0    , 1    , 0 }, // 046 Ongkhot
            new sbyte[] {0    , 0    , 0    , -7   , 6    , 0    , 0    , 0    , 0    , -7   , 0    , 0    , 0    , 1    , 1    , 0 }, // 047 Jinn
            //          {Phys , Fire , Ice  , Elec , Force, Alm  , Light, Dark , Curse, Nerve, Mind , SD   , N/A  , Heal , Supp , Util}
            new sbyte[] {0    , 3    , 0    , -3   , 3    , 0    , 0    , 0    , -3   , -3   , -3   , 0    , 0    , 0    , 1    , 0 }, // 048 Karasu Tengu
            new sbyte[] {-4   , 2    , 0    , 0    , 0    , 0    , 0    , 0    , 4    , 0    , 0    , 0    , 0    , 2    , 0    , 0 }, // 049 Dís
            new sbyte[] {0    , -4   , 3    , 0    , 0    , 0    , 0    , 0    , 3    , 3    , 3    , 0    , 0    , 1    , 0    , 0 }, // 050 Isora
            new sbyte[] {0    , -3   , 0    , 2    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0    , 0    , 1    , 1    , 0 }, // 051 Apsaras
            new sbyte[] {0    , 0    , 0    , -3   , 3    , 0    , 0    , 0    , -3   , 0    , 0    , 0    , 0    , 0    , 1    , 0 }, // 052 Koppa Tengu
            new sbyte[] {-4   , 4    , 4    , 4    , 4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 1    , 0 }, // 053 Titania
            new sbyte[] {0    , 3    , 3    , 3    , 3    , -4   , 0    , -4   , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 0 }, // 054 Oberon
            new sbyte[] {4    , -4   , 4    , -4   , 0    , 0    , 0    , 0    , 0    , -4   , -4   , 0    , 0    , 1    , 0    , 0 }, // 055 Troll
            new sbyte[] {4    , 0    , 0    , -3   , 2    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 056 Setanta
            new sbyte[] {0    , 0    , 0    , 0    , -3   , 0    , 0    , 0    , 0    , 0    , 3    , 0    , 0    , 3    , 1    , 0 }, // 057 Kelpie
            new sbyte[] {0    , 5    , -5   , 0    , 0    , 0    , -1   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 0 }, // 058 Jack-o'-Lantern
            new sbyte[] {0    , 0    , 0    , 2    , 2    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 1    , 0 }, // 059 High Pixie
            new sbyte[] {0    , -5   , 4    , 0    , 0    , 0    , 1    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 060 Jack Frost
            new sbyte[] {0    , 0    , 0    , 1    , 0    , 1    , 0    , 0    , 0    , 0    , 0    , 1    , 0    , 1    , 1    , 0 }, // 061 Pixie
            new sbyte[] {0    , 5    , -5   , 0    , 0    , 0    , 5    , -5   , 0    , 0    , 0    , 0    , 0    , 3    , 1    , 0 }, // 062 Throne
            new sbyte[] {0    , 0    , 0    , -5   , 0    , 0    , 5    , -5   , 0    , 0    , 0    , 0    , 0    , 3    , 1    , 0 }, // 063 Dominion
            new sbyte[] {0    , 0    , 0    , 4    , -5   , 0    , 4    , -5   , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 0 }, // 064 Virtue
            new sbyte[] {4    , 0    , 0    , 0    , 0    , 0    , 4    , -6   , 0    , 0    , 0    , 0    , 0    , 1    , 1    , 0 }, // 065 Power
            new sbyte[] {2    , 0    , 0    , 0    , 0    , 0    , 4    , -5   , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 0 }, // 066 Principality
            new sbyte[] {3    , 1    , -3   , 0    , 0    , 0    , 3    , -5   , 0    , 0    , 0    , 0    , 0    , 1    , 1    , 0 }, // 067 Archangel
            new sbyte[] {0    , 0    , 0    , -3   , 0    , 0    , 3    , -4   , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 0 }, // 068 Angel
            new sbyte[] {6    , 0    , 0    , 0    , 0    , 0    , 0    , 4    , -6   , -6   , -6   , 0    , 0    , 0    , 0    , 0 }, // 069 Flauros
            new sbyte[] {0    , 3    , 0    , 0    , 0    , 3    , -4   , 3    , 0    , 0    , 5    , 3    , 0    , 0    , 0    , 0 }, // 070 Decarabia
            new sbyte[] {5    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -4   , -4   , -4   , 0    , 0    , 0    , 3    , 0 }, // 071 Ose
            new sbyte[] {4    , 4    , -4   , 0    , 0    , 0    , 0    , 2    , 0    , 0    , 0    , 0    , 0    , -1   , 0    , 0 }, // 072 Berith
            new sbyte[] {4    , 0    , 0    , -4   , 0    , 0    , 0    , 2    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 073 Eligor
            new sbyte[] {0    , 0    , 4    , -5   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 074 Forneus
            new sbyte[] {0    , -6   , 0    , 5    , 5    , 0    , 0    , 0    , -6   , -6   , -6   , 0    , 0    , 2    , 0    , 0 }, // 075 Yurlungur
            new sbyte[] {0    , 0    , 5    , -6   , 0    , 0    , 0    , 0    , 5    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 076 Quetzalcoatl
            new sbyte[] {4    , -5   , 2    , 4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 077 Naga Raja
            new sbyte[] {0    , -5   , 4    , 0    , 0    , 0    , 0    , 0    , -5   , 0    , 4    , 0    , 0    , 0    , 2    , 0 }, // 078 Mizuchi
            new sbyte[] {3    , 0    , 0    , 2    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 0 }, // 079 Naga
            new sbyte[] {2    , 0    , 0    , -4   , 0    , 0    , 0    , 0    , 3    , 0    , 0    , 0    , 0    , 0    , 1    , 0 }, // 080 Nozuchi
            new sbyte[] {6    , 6    , -7   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -3   , 2    , 0 }, // 081 Cerberus
            new sbyte[] {4    , 4    , -6   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -2   , 1    , 0 }, // 082 Orthrus
            new sbyte[] {2    , 0    , 0    , -6   , 6    , 0    , 0    , -6   , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 0 }, // 083 Suparna
            new sbyte[] {3    , 0    , 0    , -4   , 3    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 0 }, // 084 Badb Catha
            new sbyte[] {0    , 3    , 0    , 0    , -4   , 0    , 0    , 0    , 2    , 0    , 2    , 0    , 0    , 1    , 1    , 0 }, // 085 Inugami
            new sbyte[] {3    , 0    , -4   , 0    , 2    , 0    , 0    , 0    , 3    , 3    , 3    , 0    , 0    , 0    , 0    , 0 }, // 086 Nekomata
            new sbyte[] {4    , -4   , 0    , -4   , 4    , 0    , 0    , 0    , -2   , -2   , -2   , 0    , 0    , 0    , 0    , 0 }, // 087 Gogmagog
            new sbyte[] {5    , 0    , 0    , -4   , 0    , 0    , 0    , 0    , -4   , 0    , -4   , 0    , 0    , 0    , 0    , 0 }, // 088 Titan
            new sbyte[] {3    , 0    , 0    , 0    , 0    , 0    , 2    , 0    , -4   , -4   , -4   , 0    , 0    , 0    , 2    , 0 }, // 089 Sarutahiko
            new sbyte[] {0    , -3   , -2   , 0    , 3    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 090 Sudama
            new sbyte[] {0    , 2    , -3   , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 0    , 0    , 0    , 1    , 1    , 0 }, // 091 Hua Po
            new sbyte[] {0    , -3   , 0    , 0    , 2    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 0    , 0 }, // 092 Kodama
            new sbyte[] {0    , -7   , 0    , 0    , 0    , 0    , 5    , 5    , 2    , 2    , 2    , 0    , 0    , 0    , 0    , 0 }, // 093 Shiki-Ouji
            new sbyte[] {4    , -2   , -2   , -2   , -2   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -2   , 0    , 0 }, // 094 Oni
            new sbyte[] {3    , 0    , 0    , 0    , 0    , 0    , -3   , 3    , 3    , -3   , -3   , 0    , 0    , 0    , -3   , 0 }, // 095 Yomotsu-Ikusa
            //          {Phys , Fire , Ice  , Elec , Force, Alm  , Light, Dark , Curse, Nerve, Mind , SD   , N/A  , Heal , Supp , Util}
            new sbyte[] {4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -5   , -5   , -5   , 0    , 0    , -2   , 0    , 0 }, // 096 Momunofu
            new sbyte[] {0    , -3   , 0    , 2    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 0 }, // 097 Shikigami
            new sbyte[] {5    , 5    , 0    , -5   , 5    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0    , 0 }, // 098 Rangda
            new sbyte[] {4    , 4    , -5   , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 2    , 0    , 0    , -2   , 0    , 0 }, // 099 Dakini
            new sbyte[] {2    , 0    , 0    , -4   , 2    , 0    , 0    , 0    , 4    , 4    , 4    , 0    , 0    , 0    , 0    , 0 }, // 100 Yaksini
            new sbyte[] {0    , -4   , 0    , 0    , 3    , 0    , -4   , 3    , 5    , 5    , 5    , 0    , 0    , 0    , 0    , 0 }, // 101 Yomotsu-Shikome
            new sbyte[] {3    , 0    , -4   , 3    , 0    , 0    , 0    , 0    , 0    , 2    , 0    , 0    , 0    , -2   , 0    , 0 }, // 102 Taraka
            new sbyte[] {0    , 0    , 1    , -3   , 0    , 0    , 0    , 0    , 3    , 3    , 3    , 0    , 0    , 0    , 0    , 0 }, // 103 Datsue-Ba
            new sbyte[] {5    , 5    , -5   , 0    , 0    , -5   , 0    , 0    , -5   , 0    , 5    , -5   , 0    , 3    , 3    , 0 }, // 104 Mada
            new sbyte[] {5    , -5   , -5   , -5   , -5   , 0    , -5   , 0    , 5    , 5    , -3   , 0    , 0    , -3   , 2    , 0 }, // 105 Girimekhala
            new sbyte[] {5    , -4   , -4   , -4   , -4   , 5    , 0    , 5    , 0    , 0    , 0    , 5    , 0    , 0    , 0    , 0 }, // 106 Taotie
            new sbyte[] {0    , 0    , -5   , 0    , 4    , 0    , 0    , 2    , 4    , 0    , 4    , 0    , 0    , 2    , 0    , 0 }, // 107 Pazuzu
            new sbyte[] {0    , 2    , 0    , 0    , 0    , 0    , -4   , 4    , 4    , 0    , 4    , 0    , 0    , 0    , 0    , 0 }, // 108 Baphomet
            new sbyte[] {0    , 4    , 0    , -7   , 6    , 6    , 0    , 6    , 0    , 0    , 0    , 6    , 0    , 0    , 0    , 0 }, // 109 Mot
            new sbyte[] {6    , 0    , 0    , 0    , 0    , 6    , -5   , 4    , 0    , 0    , 0    , 6    , 0    , 0    , 2    , 0 }, // 110 Alciel
            new sbyte[] {5    , 7    , -7   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 111 Surt
            new sbyte[] {4    , 0    , 4    , -4   , 0    , 0    , -4   , 4    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 112 Abaddon
            new sbyte[] {0    , 4    , 4    , 4    , 4    , 0    , -4   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 113 Loki
            new sbyte[] {0    , 0    , -5   , 6    , 0    , 4    , 0    , 6    , 4    , 4    , 6    , 4    , 0    , 0    , 0    , 0 }, // 114 Lilith
            new sbyte[] {-5   , 0    , 6    , 0    , 0    , 4    , 0    , 0    , 0    , 0    , 6    , 4    , 0    , 0    , 4    , 0 }, // 115 Nyx
            new sbyte[] {-4   , 4    , 4    , 4    , 4    , 0    , 0    , 0    , 0    , 0    , 3    , 0    , 0    , 3    , 0    , 0 }, // 116 Queen Mab
            new sbyte[] {0    , -3   , 3    , 0    , 0    , 0    , -3   , 0    , 3    , 3    , 5    , 0    , 0    , 1    , 1    , 0 }, // 117 Succubus
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 5    , 5    , 5    , 0    , 0    , 0    , -2   , 0 }, // 118 Incubus
            new sbyte[] {3    , 0    , 3    , -3   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 119 Fomorian
            new sbyte[] {0    , 0    , -3   , 2    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0    , 0    , 0    , 0    , 0 }, // 120 Lilim
            new sbyte[] {4    , -6   , 6    , -2   , 6    , 0    , 0    , 0    , 4    , 0    , 0    , 0    , 0    , 0    , -2   , 0 }, // 121 Hresvelgr
            new sbyte[] {0    , 3    , 0    , -3   , 0    , 0    , 0    , 0    , 5    , 5    , 5    , 0    , 0    , 0    , 1    , 0 }, // 122 Mothman
            new sbyte[] {3    , 0    , 0    , 3    , -4   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -2   , 0    , 0 }, // 123 Raiju
            new sbyte[] {2    , -4   , 4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 124 Nue
            new sbyte[] {2    , 0    , 0    , -3   , 0    , 0    , -3   , 2    , 2    , 2    , 2    , 0    , 0    , -1   , 0    , 0 }, // 125 Bicorn
            new sbyte[] {1    , -3   , 0    , 0    , 2    , 0    , 0    , 0    , 2    , 2    , 0    , 0    , 0    , 0    , 0    , 0 }, // 126 Zhen
            new sbyte[] {4    , 0    , 0    , -3   , 0    , 4    , -3   , 3    , 3    , 0    , 0    , 4    , 0    , -3   , 3    , 0 }, // 127 Vetala
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , -5   , 4    , 0    , 0    , 4    , 0    , 0    , -2   , 1    , 0 }, // 128 Legion
            new sbyte[] {3    , 0    , -3   , 0    , 0    , 0    , -4   , 3    , 0    , 0    , 0    , 0    , 0    , 1    , 1    , 0 }, // 129 Yaka
            new sbyte[] {2    , 2    , 0    , 0    , -4   , 0    , -4   , 2    , 0    , 0    , 0    , 0    , 0    , -2   , 0    , 0 }, // 130 Choronzon
            new sbyte[] {1    , -3   , -3   , -3   , -3   , 0    , -3   , 3    , 3    , 0    , 0    , 0    , 0    , -1   , 0    , 0 }, // 131 Preta
            new sbyte[] {0    , 0    , 0    , 3    , -5   , 3    , -5   , 5    , 0    , 0    , 0    , 3    , 0    , -3   , 3    , 0 }, // 132 Shadow
            new sbyte[] {2    , 0    , 0    , -2   , 0    , 2    , -2   , 0    , 5    , 5    , 5    , 2    , 0    , -3   , 0    , 0 }, // 133 Black Ooze
            new sbyte[] {1    , -2   , -2   , 0    , 0    , 1    , -3   , 0    , 4    , 4    , 4    , 1    , 0    , -3   , 0    , 0 }, // 134 Blob
            new sbyte[] {1    , -3   , -3   , -3   , -3   , 0    , -3   , 0    , 3    , 3    , 3    , 0    , 0    , -1   , -1   , 0 }, // 135 Slime
            new sbyte[] {0    , 1    , 0    , 0    , 0    , 0    , -3   , 3    , 1    , 1    , 1    , 0    , 0    , -1   , 0    , 0 }, // 136 Mou-Ryo
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 1    , -3   , 0    , 1    , 1    , 1    , 1    , 0    , -3   , 0    , 0 }, // 137 Will o' Wisp
            new sbyte[] {6    , 4    , 4    , 4    , 4    , 6    , 4    , 0    , -6   , -6   , -6   , 6    , 0    , 0    , 0    , 0 }, // 138 Michael
            new sbyte[] {0    , 0    , 6    , -6   , 0    , 0    , 6    , 0    , -4   , -4   , -4   , 0    , 0    , 4    , 4    , 0 }, // 139 Gabriel
            new sbyte[] {4    , -6   , 0    , 0    , 6    , 0    , 6    , 0    , -4   , -4   , -4   , 0    , 0    , 4    , 0    , 0 }, // 140 Raphael
            new sbyte[] {4    , 6    , -6   , 4    , 0    , 0    , 6    , 0    , -4   , -4   , -4   , 0    , 0    , 0    , 0    , 0 }, // 141 Uriel
            new sbyte[] {6    , 0    , 0    , -6   , 4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 4    , 0 }, // 142 Ganesha
            new sbyte[] {4    , 2    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -4   , 0    , 0    , 0    , 2    , 0 }, // 143 Valkyrie
            //          {Phys , Fire , Ice  , Elec , Force, Alm  , Light, Dark , Curse, Nerve, Mind , SD   , N/A  , Heal , Supp , Util}
            new sbyte[] {3    , -3   , -3   , -3   , -3   , 3    , 0    , 0    , 0    , 0    , 0    , 3    , 0    , 0    , 3    , 0 }, // 144 Arahabaki
            new sbyte[] {2    , 0    , 0    , -5   , 5    , 0    , 2    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 145 Kurama Tengu
            new sbyte[] {5    , 0    , 0    , 0    , 0    , 0    , 0    , -4   , -4   , -4   , -4   , 0    , 0    , 0    , 2    , 0 }, // 146 Hanuman
            new sbyte[] {5    , 0    , 0    , -3   , 5    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0 }, // 147 Cu Chulainn
            new sbyte[] {0    , -7   , 3    , -3   , 5    , 0    , 3    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0 }, // 148 Qing Long
            new sbyte[] {0    , 0    , 5    , -6   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 149 Xuanwu
            new sbyte[] {5    , 0    , 0    , 5    , -4   , 0    , 0    , -4   , 2    , 2    , 2    , 0    , 0    , 0    , 2    , 0 }, // 150 Barong
            new sbyte[] {0    , 2    , 0    , 0    , 0    , -3   , 2    , 0    , -3   , -3   , -3   , -3   , 0    , 3    , 2    , 0 }, // 151 Makami
            new sbyte[] {3    , 0    , 0    , -6   , 7    , 0    , 3    , -6   , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0 }, // 152 Garuda
            new sbyte[] {0    , 0    , -7   , 0    , 5    , 0    , 5    , -7   , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 0 }, // 153 Yatagarasu
            new sbyte[] {3    , 0    , 0    , 3    , 7    , 0    , -6   , 3    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0 }, // 154 Gurulu
            new sbyte[] {7    , -4   , -4   , -4   , -4   , 0    , 0    , -4   , 0    , 0    , 0    , 0    , 0    , 3    , 3    , 0 }, // 155 Albion
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 156 Manikin
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 157 Manikin
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 158 Manikin
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 159 Manikin
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 160 Manikin
            new sbyte[] {0    , 4    , 0    , -5   , 0    , 6    , -5   , 6    , 4    , 4    , 4    , 6    , 0    , 2    , 2    , 0 }, // 161 Samael
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 162 Manikin
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 163 Manikin
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 164 Manikin
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 165 Manikin
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 166 Manikin
            new sbyte[] {2    , -3   , 0    , 2    , 0    , 0    , -3   , 2    , 5    , 5    , 5    , 0    , 0    , -3   , 2    , 0 }, // 167 Pisaca
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , -7   , 5    , 0    , 0    , 2    , 0    , 0    , 0    , 2    , 0 }, // 168 Kaiwan
            new sbyte[] {6    , -2   , -2   , -2   , -2   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -2   , 2    , 0 }, // 169 Kin-Ki
            new sbyte[] {2    , -7   , 6    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -2   , 2    , 0 }, // 170 Sui-Ki
            new sbyte[] {2    , 0    , 0    , -7   , 6    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , -2   , 2    , 0 }, // 171 Fuu-Ki
            new sbyte[] {6    , 0    , 0    , 0    , 0    , 3    , -7   , 6    , 3    , 3    , 3    , 3    , 0    , -2   , 3    , 0 }, // 172 Ongyo-Ki
            new sbyte[] {-5   , 0    , 0    , 0    , 0    , 3    , 6    , 0    , 0    , 0    , 6    , 3    , 0    , 3    , 0    , 0 }, // 173 Clotho
            new sbyte[] {-5   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 6    , 6    , 6    , 0    , 0    , 0    , 4    , 0 }, // 174 Lachesis
            new sbyte[] {-5   , 6    , 6    , 6    , 6    , 4    , 0    , 0    , 0    , 0    , 0    , 4    , 0    , 0    , 0    , 0 }, // 175 Atropos
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , -4   , 5    , 5    , 5    , 5    , 0    , 0    , 0    , 2    , 0 }, // 176 Loa
            new sbyte[] {3    , 0    , -4   , 0    , 0    , 0    , -4   , 3    , 3    , 3    , 3    , 0    , 0    , -2   , 1    , 0 }, // 177 Chatterskull
            new sbyte[] {0    , 0    , 0    , 5    , -4   , 2    , -4   , 0    , 0    , 0    , 0    , 2    , 0    , -4   , 2    , 0 }, // 178 Phantom
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 179 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 180 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 181 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 182 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 183 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 184 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 185 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 186 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 187 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 188 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 189 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 190 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 191 
            //          {Phys , Fire , Ice  , Elec , Force, Alm  , Light, Dark , Curse, Nerve, Mind , SD   , N/A  , Heal , Supp , Util}
            new sbyte[] {6    , 0    , 0    , 6    , 6    , 4    , 0    , 0    , 0    , 0    , 0    , 4    , 0    , 0    , 4    , 0 }, // 192 Raidou/Dante
            new sbyte[] {7    , 7    , -7   , 0    , 0    , 7    , 7    , -7   , 0    , 0    , 0    , 7    , 0    , -4   , 4    , 0 }, // 193 Metatron
            new sbyte[] {0    , -7   , 0    , 7    , 7    , 7    , -7   , 7    , 0    , 0    , 0    , 7    , 0    , -4   , 4    , 0 }, // 194 Beelzebub (Fly)
            new sbyte[] {4    , -5   , 0    , -5   , 0    , 4    , 0    , 0    , 7    , 7    , 7    , 4    , 0    , 0    , 2    , 0 }, // 195 Pale Rider
            new sbyte[] {0    , 5    , 0    , -5   , 0    , 0    , 7    , -5   , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0 }, // 196 White Rider
            new sbyte[] {6    , -5   , -5   , 4    , 4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 197 Red Rider
            new sbyte[] {0    , 0    , 7    , -5   , -5   , 5    , 0    , 3    , 0    , 0    , 0    , 5    , 0    , 0    , 3    , 0 }, // 198 Black Rider
            new sbyte[] {4    , 0    , -4   , -4   , 4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 199 Matador
            new sbyte[] {3    , 4    , -4   , 0    , 4    , 0    , -4   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0 }, // 200 Hell Biker
            new sbyte[] {-4   , -4   , 0    , 0    , 0    , 0    , 4    , 4    , 0    , 0    , 4    , 0    , 0    , 2    , 0    , 0 }, // 201 Daisoujou
            new sbyte[] {0    , 0    , -6   , 5    , -6   , 5    , 0    , 0    , 3    , 3    , 3    , 5    , 0    , 0    , 3    , 0 }, // 202 Mother Harlot
            new sbyte[] {-7   , 5    , 5    , 5    , 5    , 7    , 0    , 0    , 0    , 0    , 0    , 7    , 0    , 0    , 0    , 0 }, // 203 Trumpeter
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 204 Futomimi
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 205 Sakahagi
            new sbyte[] {0    , 0    , 6    , 0    , 0    , 0    , -7   , 6    , 0    , 0    , 0    , 0    , 0    , -3   , 3    , 0 }, // 206 Black Frost
            new sbyte[] {0    , -7   , 0    , 6    , 6    , 3    , -7   , 6    , 0    , 0    , 0    , 3    , 0    , -4   , 3    , 0 }, // 207 Beelzebub (Man)
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 208 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 209 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 210 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 211 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 212 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 213 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 214 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 215 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 216 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 217 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 218 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 219 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 220 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 221 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 222 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 223 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 224 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 225 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 226 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 227 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 228 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 229 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 230 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 231 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 232 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 233 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 234 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 235 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 236 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 237 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 238 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 239 
            //          {Phys , Fire , Ice  , Elec , Force, Alm  , Light, Dark , Curse, Nerve, Mind , SD   , N/A  , Heal , Supp , Util}
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 240 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 241 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 242 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 243 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 244 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 245 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 246 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 247 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 248 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 249 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 250 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 251 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 252 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 253 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 254 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 255 
            new sbyte[] {0    , 0    , 4    , -5   , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // 256 Boss Forneus
            new sbyte[] {0    , 3    , 0    , 0    , 0    , 3    , 0    , 0    , 0    , 0    , 0    , 3    , 0    , 0    , 0    , 0 }, // 257 Boss Specter 1 (Mini)
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 258 Boss Ahriman 2
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 259 Boss Noah 2
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 260 Forced Incubus
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 261 Forced Koppa Tengu
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 262 Forced Kaiwan
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 263 Boss Ose
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 264 Boss Kagutsuchi 2
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 265 Ambush Mizuchi
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 266 Boss Kin-Ki
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 267 Boss Sui-Ki
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 268 Boss Fuu-Ki
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 269 Boss Ongyo-Ki
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 270 Boss Clotho (Solo)
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 271 Boss Lachesis (Solo)
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 272 Boss Atropos (Solo)
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 273 Boss Specter 2
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 274 Boss Girimekhala
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 275 Boss Specter 3
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 276 Boss Aciel
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 277 Boss Skadi
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 278 Boss Albion
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 279 Boss Urthona
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 280 Boss Urizen
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 281 Boss Luvah
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 282 Boss Tharmus
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 283 Boss Futomimi
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 284 Boss Gabriel
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 285 Boss Raphael
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 286 Boss Uriel
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 287 Boss Samael
            //          {Phys , Fire , Ice  , Elec , Force, Alm  , Light, Dark , Curse, Nerve, Mind , SD   , N/A  , Heal , Supp , Util}
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 288 Boss Baal Avatar
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 289 Boss Ose Hallel
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 290 Boss Flauros Hallel
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 291 Boss Ahriman 1
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 292 Boss Noah 1
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 293 Boss Kagutsuchi 1
            new sbyte[] {0    , 6    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 294 Boss Specter 1 (Merged 6)
            new sbyte[] {0    , 5    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 295 Boss Specter 1 (Merged 4-5)
            new sbyte[] {0    , 4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 296 Boss Specter 1 (Merged 2-3)
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 297 Boss Mizuchi
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 298 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 299 Boss Sakahagi
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 300 Boss Orthrus
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 301 Boss Yaksini
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 302 Boss Thor
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 303 Boss Black Frost
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 304 Ambush Karasu Tengu
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 305 Ambush Karasu Tengu
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 306 Ambush Karasu Tengu
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 307 Boss Eligor
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 308 Boss Eligor
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 309 Boss Eligor
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 310 Ambush Kelpie
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 311 Ambush Kelpie
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 312 Boss Berith
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 313 Boss Succubus
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 314 Ambush High Pixie
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 315 Boss Kaiwan
            new sbyte[] {3    , 0    , -4   , 0    , 2    , 0    , 0    , 0    , 3    , 3    , 3    , 0    , 0    , 0    , 0    , 0 }, // 316 Forced Nekomata
            new sbyte[] {4    , -4   , 4    , -4   , 0    , 0    , 0    , 0    , 0    , -4   , -4   , 0    , 0    , 1    , 0    , 0 }, // 317 Boss Troll
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 1    , -3   , 0    , 1    , 1    , 1    , 1    , 0    , -3   , 0    , 0 }, // 318 Forced Will o' Wisp
            new sbyte[] {1    , -3   , -3   , -3   , -3   , 0    , -3   , 3    , 3    , 0    , 0    , 0    , 0    , -1   , 0    , 0 }, // 319 Forced Preta
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 320 Boss Bishamonten 1
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 321 Boss Mara
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 322 Boss Bishamonten 2
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 323 Boss Jikokuten
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 324 Boss Koumokuten
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 325 Boss Zouchouten
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 326 Boss Clotho (Together)
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 327 Boss Lachesis (Together)
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 328 Boss Atropos (Together)
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 329 Boss Mitra
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 330 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 331 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 332 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 333 Boss Mada
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 334 Boss Mot
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 335 Boss Surt
            //          {Phys , Fire , Ice  , Elec , Force, Alm  , Light, Dark , Curse, Nerve, Mind , SD   , N/A  , Heal , Supp , Util}
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 336 Ambush Jack-o'-Lantern
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 337 Boss Thor 2
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 338 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 339 Boss Raidou/Dante 1
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 340 Chase Raidou/Dante
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 341 Boss Raidou/Dante 2
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 342 Boss Metatron
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 343 Boss Beelzebub
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 344 Boss Lucifer
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 345 Boss Pale Rider
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 346 Boss White Rider
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 347 Boss Red Rider
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 348 Boss Black Rider
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 349 Boss Matador
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 350 Boss Hell Biker
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 351 Boss Daisoujou
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 352 Boss Mother Harlot
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 353 Boss Trumpeter
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 354 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 355 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 356 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 357 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 358 Boss Loa
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 359 Boss Virtue
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 360 Boss Power
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 361 Boss Legion
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 362 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 363 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 364 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 365 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 366 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 367 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 368 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 369 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 370 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 371 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 372 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 373 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 374 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 375 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 376 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 377 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 378 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 379 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 380 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 381 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // 382 
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }  // 383 
        }; // Array of all demons' skill potential

        private static sbyte[][] magatamaPotentials = new sbyte[][]
        {
            //          {Phys , Fire , Ice  , Elec , Force, Alm  , Light, Dark , Curse, Nerve, Mind , SD   , N/A  , Heal , Supp , Util}
            new sbyte[] {1    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // Marogareh
            new sbyte[] {0    , 0    , 3    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 0 }, // Wadatsumi
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 1    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0    , 0 }, // Ankh
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0 }, // Iyomante
            new sbyte[] {0    , 3    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 0 }, // Shiranui
            new sbyte[] {0    , 0    , 0    , 0    , 3    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 1    , 0 }, // Hifumi
            new sbyte[] {3    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // Kamudo
            new sbyte[] {0    , 0    , 0    , 5    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // Narukami
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 5    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // Anathema
            new sbyte[] {0    , 0    , 6    , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 2    , 0    , 0    , 0    , 0    , 0 }, // Miasma
            new sbyte[] {3    , 0    , 0    , 0    , 0    , 0    , 5    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // Nirvana
            new sbyte[] {4    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 2    , 2    , 0    , 0    , 0    , 0    , 0 }, // Murakumo
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 5    , 0    , 0    , 0    , 0    , 0    , 0    , 5    , 3    , 0 }, // Geis
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 5    , 5    , 5    , 0    , 0    , 0    , 5    , 0 }, // Djed
            new sbyte[] {0    , 3    , 3    , 3    , 3    , 0    , 0    , 0    , 7    , 7    , 7    , 0    , 0    , 0    , 0    , 0 }, // Muspell
            new sbyte[] {0    , 7    , 0    , 0    , 0    , 0    , 0    , 3    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // Gehenna
            new sbyte[] {7    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // Kamurogi
            new sbyte[] {2    , 0    , 0    , 0    , 0    , 0    , 0    , 8    , 0    , 0    , 0    , 0    , 0    , 0    , 2    , 0 }, // Satan
            new sbyte[] {0    , 0    , 0    , 9    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // Adama
            new sbyte[] {6    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 3    , 0 }, // Vimana
            new sbyte[] {4    , 0    , 0    , 0    , 8    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // Gundari
            new sbyte[] {0    , 0    , 0    , 0    , 0    , 0    , 7    , 0    , 0    , 0    , 0    , 0    , 0    , 7    , 0    , 0 }, // Sophia
            new sbyte[] {9    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0 }, // Gaea
            new sbyte[] {0    , 5    , 5    , 5    , 5    , 7    , 0    , 0    , 0    , 0    , 0    , 7    , 0    , 0    , 3    , 0 }, // Kailash
            new sbyte[] {9    , 9    , 9    , 9    , 9    , 9    , 9    , 9    , 9    , 9    , 9    , 9    , 0    , 5    , 5    , 0 }  // Masakados
        }; // Array of all Magatamas' skill potential

        private static string[] potentialHelp = new string[]
        {
            "", // 000
            "  <material=\"MsgFont4\">+7: Light/Dark • +5: Phys/Almighty • +4: Heal  <material=\"MsgFont1\">-3: Supp • -5: Fire", // 001 Vishnu
            "  <material=\"MsgFont4\">+6: Light/Dark • +3: Almighty/Heal  <material=\"MsgFont1\">-6: Force", // 002 Mitra
            "  <material=\"MsgFont4\">+6: Fire/Light • +2: Heal/Supp  <material=\"MsgFont1\">-4: Ice/Elec", // 003 Amaterasu
            "  <material=\"MsgFont4\">+6: Elec • +4: Phys • +2: Ice/Supp  <material=\"MsgFont1\">-7: Force", // 004 Odin
            "  <material=\"MsgFont4\">+5: Phys • +3: Light/Dark  <material=\"MsgFont1\">-4: Curse/Mind", // 005 Atavaka
            "  <material=\"MsgFont4\">+4: Light • +2: Almighty/Heal/Supp  <material=\"MsgFont1\">-4: Dark/Curse", // 006 Horus
            "  <material=\"MsgFont4\">+5: Light • +3: Heal/Supp  <material=\"MsgFont1\">-5: Phys", // 007 Lakshmi
            "  <material=\"MsgFont4\">+6: Force • +3: Phys/Curse/Heal  <material=\"MsgFont1\">-5: Elec", // 008 Scathach
            "  <material=\"MsgFont4\">+4: Force • +2: Ailments/Supp  <material=\"MsgFont1\">-4: Fire", // 009 Sarasvati
            "  <material=\"MsgFont4\">+5: Fire • +3: Almighty/Mind/Heal  <material=\"MsgFont1\">-5: Ice/Dark/Curse", // 010 Sati
            "  <material=\"MsgFont4\">+2: Force/Light/Heal/Supp  <material=\"MsgFont1\">-3: Phys/Elec", // 011 Ame-no-Uzume
            "  <material=\"MsgFont4\">+7: Phys/Almighty • +5: Fire/Elec • +4: Supp  <material=\"MsgFont1\">-3: Heal • -5: Ice/Ailments", // 012 Shiva
            "  <material=\"MsgFont4\">+5: Light/Dark • +4: Phys  <material=\"MsgFont1\">-3: Supp", // 013 Beidou Xingjun
            "  <material=\"MsgFont4\">+7: Phys • +2: Supp  <material=\"MsgFont1\">-3: Heal • -5: Dark", // 014 Qitian Dasheng
            "  <material=\"MsgFont4\">+4: Curse/Mind • +3: Phys/Fire/Almighty  <material=\"MsgFont1\">-4: Ice", // 015 Dionysus
            "  <material=\"MsgFont4\">+6: Phys/Fire  <material=\"MsgFont1\">-3: Supp • -5: Ice", // 016 Kali
            "  <material=\"MsgFont4\">+7: Ice • +5: Phys/Curse • +2: Heal  <material=\"MsgFont1\">-7: Elec", // 017 Skadi
            "  <material=\"MsgFont4\">+6: Light • +4: Fire/Heal • +3: Almighty/Supp  <material=\"MsgFont1\">-5: Ice/Dark", // 018 Parvati
            "  <material=\"MsgFont4\">+4: Light/Heal • +2: Supp  <material=\"MsgFont1\">-3: Phys • -5: Dark", // 019 Kushinada
            "  <material=\"MsgFont4\">+3: Heal • +2: Light/Mind/Supp  <material=\"MsgFont1\">-3: Phys • -5: Fire", // 020 Kikuri-Hime
            "  <material=\"MsgFont4\">+6: Phys/Fire/Almighty • +3: Light/Supp  <material=\"MsgFont1\">-4: Ice", // 021 Bishamonten
            "  <material=\"MsgFont4\">+7: Elec • +5: Phys • +2: Supp  <material=\"MsgFont1\">-3: Ailments • -7: Force", // 022 Thor
            "  <material=\"MsgFont4\">+4: Phys/Ice • +3: Supp  <material=\"MsgFont1\">-4: Fire", // 023 Jikokuten
            "  <material=\"MsgFont4\">+5: Phys/Elec • +2: Supp  <material=\"MsgFont1\">-5: Force", // 024 Take-Mikazuchi
            "  <material=\"MsgFont4\">+3: Phys/Fire/Heal  <material=\"MsgFont1\">-5: Ice", // 025 Okuninushi
            "  <material=\"MsgFont4\">+4: Phys/Force • +3: Supp  <material=\"MsgFont1\">-4: Elec", // 026 Koumokuten
            "  <material=\"MsgFont4\">+4: Phys/Light • +2: Supp  <material=\"MsgFont1\">-4: Force", // 027 Zouchouten
            "  <material=\"MsgFont4\">+4: Elec • +2: Phys  <material=\"MsgFont1\">-1: Nerve/Mind • -3: Fire", // 028 Take-Minakata
            "  <material=\"MsgFont4\">+5: Phys/Fire • +2: Supp  <material=\"MsgFont1\">-2: Heal • -6: Nerve", // 029 Chimera
            "  <material=\"MsgFont4\">+5: Elec • +3: Phys/Ice • +2: Supp  <material=\"MsgFont1\">-3: Force • -6: Fire", // 030 Baihu
            "  <material=\"MsgFont4\">+4: Force • +2: Heal/Supp  <material=\"MsgFont1\">-3: Phys/Elec/Dark", // 031 Senri
            "  <material=\"MsgFont4\">+5: Fire • +2: Elec • +1: Ailments/Supp  <material=\"MsgFont1\">-3: Phys • -6: Ice", // 032 Zhuque
            "  <material=\"MsgFont4\">+3: Elec • +2: Supp • +1: Phys  <material=\"MsgFont1\">-3: Fire", // 033 Shiisaa
            "  <material=\"MsgFont4\">+4: Phys/Ice • +2: Heal  <material=\"MsgFont1\">-5: Force/Nerve/Mind", // 034 Xiezhai
            "  <material=\"MsgFont4\">+3: Phys/Light • +2: Heal/Supp  <material=\"MsgFont1\">-3: Elec/Dark", // 035 Unicorn
            "  <material=\"MsgFont4\">+3: Fire • +1: Heal  <material=\"MsgFont1\">-4: Ice", // 036 Flaemis
            "  <material=\"MsgFont4\">+3: Ice • +1: Supp  <material=\"MsgFont1\">-4: Fire", // 037 Aquans
            "  <material=\"MsgFont4\">+3: Force • +1: Ailments  <material=\"MsgFont1\">-4: Elec", // 038 Aeros
            "  <material=\"MsgFont4\">+3: Elec • +1: Supp  <material=\"MsgFont1\">-4: Force", // 039 Erthys
            "  <material=\"MsgFont4\">+2: Heal/Supp  <material=\"MsgFont1\">-3: Phys", // 040 Saki Mitama
            "  <material=\"MsgFont4\">+2: Supp<material=\"MsgFont1\">", // 041 Kushi Mitama
            "  <material=\"MsgFont4\">+2: Supp<material=\"MsgFont1\">", // 042 Nigi Mitama
            "  <material=\"MsgFont4\">+2: Phys/Supp  <material=\"MsgFont1\">-3: Magic", // 043 Ara Mitama
            "  <material=\"MsgFont4\">+6: Fire • +2: Supp  <material=\"MsgFont1\">-7: Ice", // 044 Efreet
            "  <material=\"MsgFont4\">+4: Phys/Force • +3: Ailments  <material=\"MsgFont1\">-6: Elec", // 045 Pulukishi
            "  <material=\"MsgFont4\">+4: Phys • +1: Supp  <material=\"MsgFont1\">-4: Ailments", // 046 Ongkhot
            "  <material=\"MsgFont4\">+6: Force • +1: Heal/Supp  <material=\"MsgFont1\">-7: Elec/Nerve", // 047 Jinn
            "  <material=\"MsgFont4\">+3: Fire/Force • +1: Supp  <material=\"MsgFont1\">-3: Elec/Ailments", // 048 Karasu Tengu
            "  <material=\"MsgFont4\">+4: Curse • +2: Fire/Heal  <material=\"MsgFont1\">-4: Phys", // 049 Dís
            "  <material=\"MsgFont4\">+3: Ice/Ailments • +1: Heal  <material=\"MsgFont1\">-4: Fire", // 050 Isora
            "  <material=\"MsgFont4\">+2: Elec/Mind • +1: Heal/Supp  <material=\"MsgFont1\">-3: Fire", // 051 Apsaras
            "  <material=\"MsgFont4\">+3: Force • +1: Supp  <material=\"MsgFont1\">-3: Elec/Curse", // 052 Koppa Tengu
            "  <material=\"MsgFont4\">+4: Magic • +3: Heal • +1: Supp  <material=\"MsgFont1\">-4: Phys", // 053 Titania
            "  <material=\"MsgFont4\">+3: Magic • +2: Heal/Supp  <material=\"MsgFont1\">-4: Dark/Almighty", // 054 Oberon
            "  <material=\"MsgFont4\">+4: Phys/Ice • +1: Heal  <material=\"MsgFont1\">-3: Fire/Elec/Nerve/Mind", // 055 Troll
            "  <material=\"MsgFont4\">+4: Phys • +2: Force/Supp  <material=\"MsgFont1\">-3: Elec", // 056 Setanta
            "  <material=\"MsgFont4\">+3: Mind/Heal • +1: Supp  <material=\"MsgFont1\">-3: Force", // 057 Kelpie
            "  <material=\"MsgFont4\">+5: Fire • +1: Supp  <material=\"MsgFont1\">-1: Light • -5: Ice", // 058 Jack-o'-Lantern
            "  <material=\"MsgFont4\">+2: Elec/Force • +1: Heal/Supp<material=\"MsgFont1\">", // 059 High Pixie
            "  <material=\"MsgFont4\">+4: Ice • +1: Light  <material=\"MsgFont1\">-5: Fire", // 060 Jack Frost
            "  <material=\"MsgFont4\">+1: Elec/Almighty/Heal/Supp<material=\"MsgFont1\">", // 061 Pixie
            "  <material=\"MsgFont4\">+5: Fire/Light • +3: Heal • +1: Supp  <material=\"MsgFont1\">-5: Ice/Dark", // 062 Throne
            "  <material=\"MsgFont4\">+5: Light • +3: Heal • +1: Supp  <material=\"MsgFont1\">-5: Elec/Dark", // 063 Dominion
            "  <material=\"MsgFont4\">+4: Elec/Light • +2: Heal/Supp  <material=\"MsgFont1\">-5: Force/Dark", // 064 Virtue
            "  <material=\"MsgFont4\">+4: Phys/Light • +1: Heal/Supp  <material=\"MsgFont1\">-6: Dark", // 065 Power
            "  <material=\"MsgFont4\">+4: Light • +2: Phys/Heal/Supp  <material=\"MsgFont1\">-5: Dark", // 066 Principality
            "  <material=\"MsgFont4\">+3: Phys/Light • +1: Fire/Heal/Supp  <material=\"MsgFont1\">-3: Ice • -5: Dark", // 067 Archangel
            "  <material=\"MsgFont4\">+3: Light • +2: Heal/Supp  <material=\"MsgFont1\">-3: Elec • -4: Dark", // 068 Angel
            "  <material=\"MsgFont4\">+6: Phys • +4: Dark  <material=\"MsgFont1\">-6: Ailments", // 069 Flauros
            "  <material=\"MsgFont4\">+5: Mind • +3: Fire/Almighty/Dark  <material=\"MsgFont1\">-4: Light", // 070 Decarabia
            "  <material=\"MsgFont4\">+5: Phys • +3: Supp  <material=\"MsgFont1\">-4: Ailments", // 071 Ose
            "  <material=\"MsgFont4\">+4: Phys/Fire • +2: Dark  <material=\"MsgFont1\">-1: Heal • -4: Ice", // 072 Berith
            "  <material=\"MsgFont4\">+4: Phys • +2: Dark/Supp  <material=\"MsgFont1\">-4: Elec", // 073 Eligor
            "  <material=\"MsgFont4\">+4: Ice • +2: Supp  <material=\"MsgFont1\">-5: Elec", // 074 Forneus
            "  <material=\"MsgFont4\">+5: Elec/Force • +2: Heal  <material=\"MsgFont1\">-6: Fire/Ailments", // 075 Yurlungur
            "  <material=\"MsgFont4\">+5: Ice/Curse • +2: Supp  <material=\"MsgFont1\">-6: Elec", // 076 Quetzalcoatl
            "  <material=\"MsgFont4\">+4: Phys/Elec • +2: Ice/Supp  <material=\"MsgFont1\">-5: Fire", // 077 Naga Raja
            "  <material=\"MsgFont4\">+4: Ice/Mind • +2: Supp  <material=\"MsgFont1\">-5: Fire/Curse", // 078 Mizuchi
            "  <material=\"MsgFont4\">+3: Phys • +2: Elec • +1: Supp  <material=\"MsgFont1\">-3: Fire", // 079 Naga
            "  <material=\"MsgFont4\">+3: Curse • +2: Phys • +1: Supp  <material=\"MsgFont1\">-4: Elec", // 080 Nozuchi
            "  <material=\"MsgFont4\">+6: Phys/Fire • +2: Supp  <material=\"MsgFont1\">-3: Heal • -7: Ice", // 081 Cerberus
            "  <material=\"MsgFont4\">+4: Phys/Fire • +1: Supp  <material=\"MsgFont1\">-2: Heal • -6: Ice", // 082 Orthrus
            "  <material=\"MsgFont4\">+5: Force • +2: Phys/Heal/Supp  <material=\"MsgFont1\">-6: Dark/Elec", // 083 Suparna
            "  <material=\"MsgFont4\">+3: Phys/Force • +1: Supp  <material=\"MsgFont1\">-4: Elec", // 084 Badb Catha
            "  <material=\"MsgFont4\">+3: Fire • +2: Curse/Mind • +1: Heal/Supp  <material=\"MsgFont1\">-4: Force", // 085 Inugami
            "  <material=\"MsgFont4\">+3: Phys/Ailments • +2: Force  <material=\"MsgFont1\">-4: Ice", // 086 Nekomata
            "  <material=\"MsgFont4\">+4: Phys/Force  <material=\"MsgFont1\">-2: Ailments • -4: Fire/Elec", // 087 Gogmagog
            "  <material=\"MsgFont4\">+5: Phys  <material=\"MsgFont1\">-4: Elec/Curse/Mind", // 088 Titan
            "  <material=\"MsgFont4\">+3: Phys • +2: Light/Supp  <material=\"MsgFont1\">-4: Ailments", // 089 Sarutahiko
            "  <material=\"MsgFont4\">+3: Force • +2: Supp  <material=\"MsgFont1\">-2: Ice • -3: Fire", // 090 Sudama
            "  <material=\"MsgFont4\">+2: Fire • +1: Mind/Heal/Supp  <material=\"MsgFont1\">-3: Ice", // 091 Hua Po
            "  <material=\"MsgFont4\">+2: Force • +1: Heal  <material=\"MsgFont1\">-3: Fire", // 092 Kodama
            "  <material=\"MsgFont4\">+5: Light/Dark • +2: Ailments  <material=\"MsgFont1\">-7 Fire", // 093 Shiki-Ouji
            "  <material=\"MsgFont4\">+4: Phys  <material=\"MsgFont1\">-2: Magic/Heal", // 094 Oni
            "  <material=\"MsgFont4\">+3: Phys/Dark/Curse  <material=\"MsgFont1\">-3: Light/Nerve/Mind/Supp", // 095 Yomotsu-Ikusa
            "  <material=\"MsgFont4\">+4: Phys  <material=\"MsgFont1\">-2: Heal • -5: Ailments", // 096 Momunofu
            "  <material=\"MsgFont4\">+2: Elec • +1: Supp  <material=\"MsgFont1\">-3: Fire", // 097 Shikigami
            "  <material=\"MsgFont4\">+5: Phys/Fire/Force • +2: Heal  <material=\"MsgFont1\">-5: Elec", // 098 Rangda
            "  <material=\"MsgFont4\">+4: Phys/Fire • +2: Ailments  <material=\"MsgFont1\">-2: Supp • -5: Ice", // 099 Dakini
            "  <material=\"MsgFont4\">+4: Ailments • +2: Phys/Force  <material=\"MsgFont1\">-4: Elec", // 100 Yaksini
            "  <material=\"MsgFont4\">+5: Ailments • +3: Force/Dark  <material=\"MsgFont1\">-4: Fire/Light", // 101 Yomotsu-Shikome
            "  <material=\"MsgFont4\">+3: Phys/Elec • +2: Nerve  <material=\"MsgFont1\">-2: Heal • -4: Ice", // 102 Taraka
            "  <material=\"MsgFont4\">+3: Ailments • +1: Ice  <material=\"MsgFont1\">-3: Elec", // 103 Datsue-Ba
            "  <material=\"MsgFont4\">+5: Phys/Fire/Mind • +3: Heal/Supp  <material=\"MsgFont1\">-5: Ice/Almighty/Curse", // 104 Mada
            "  <material=\"MsgFont4\">+5: Phys/Curse/Nerve • +2: Supp  <material=\"MsgFont1\">-3: Mind/Heal • -5: Magic/Light", // 105 Girimekhala
            "  <material=\"MsgFont4\">+5: Phys/Almighty/Dark  <material=\"MsgFont1\">-4: Magic", // 106 Taotie
            "  <material=\"MsgFont4\">+4: Force/Curse/Mind • +2: Dark/Heal  <material=\"MsgFont1\">-5: Ice", // 107 Pazuzu
            "  <material=\"MsgFont4\">+4: Dark/Curse/Mind • +2: Fire  <material=\"MsgFont1\">-4: Light", // 108 Baphomet
            "  <material=\"MsgFont4\">+6: Force/Dark/Almighty • +4: Fire  <material=\"MsgFont1\">-7: Elec", // 109 Mot
            "  <material=\"MsgFont4\">+6: Phys/Almighty • +4: Dark • +2: Supp  <material=\"MsgFont1\">-5: Light", // 110 Aciel
            "  <material=\"MsgFont4\">+7: Fire • +5: Phys  <material=\"MsgFont1\">-7: Ice", // 111 Surt
            "  <material=\"MsgFont4\">+4: Phys/Ice/Dark • +2: Supp  <material=\"MsgFont1\">-4: Elec/Light", // 112 Abaddon
            "  <material=\"MsgFont4\">+4: Magic  <material=\"MsgFont1\">-4: Light", // 113 Loki
            "  <material=\"MsgFont4\">+6: Elec/Mind/Dark • +4: Almighty/Curse/Nerve  <material=\"MsgFont1\">-5: Ice", // 114 Lilith
            "  <material=\"MsgFont4\">+6: Ice/Mind • +4: Almighty/Supp  <material=\"MsgFont1\">-5: Phys", // 115 Nyx
            "  <material=\"MsgFont4\">+4: Magic • +3: Mind/Heal  <material=\"MsgFont1\">-4: Phys", // 116 Queen Mab
            "  <material=\"MsgFont4\">+5: Mind • +3: Ice/Curse/Nerve • +1: Heal/Supp  <material=\"MsgFont1\">-3: Fire/Light", // 117 Succubus
            "  <material=\"MsgFont4\">+5: Ailments • +2: Dark  <material=\"MsgFont1\">-2: Supp", // 118 Incubus
            "  <material=\"MsgFont4\">+3: Phys/Ice  <material=\"MsgFont1\">-3: Elec", // 119 Fomorian
            "  <material=\"MsgFont4\">+3: Mind • +2: Elec  <material=\"MsgFont1\">-3: Ice", // 120 Lilim
            "  <material=\"MsgFont4\">+6: Ice/Force • +4: Phys/Curse  <material=\"MsgFont1\">-2: Elec/Supp • -6: Fire", // 121 Hresvelgr
            "  <material=\"MsgFont4\">+5: Ailments • +3: Fire • +1: Supp  <material=\"MsgFont1\">-3: Elec", // 122 Mothman
            "  <material=\"MsgFont4\">+3: Phys/Elec  <material=\"MsgFont1\">-2: Heal • -3: Force", // 123 Raiju
            "  <material=\"MsgFont4\">+4: Ice • +2: Phys  <material=\"MsgFont1\">-4: Fire", // 124 Nue
            "  <material=\"MsgFont4\">+2: Phys/Dark/Ailments  <material=\"MsgFont1\">-1: Heal • -3: Elec/Light", // 125 Bicorn
            "  <material=\"MsgFont4\">+2: Force/Curse/Nerve • +1: Phys  <material=\"MsgFont1\">-3: Fire", // 126 Zhen
            "  <material=\"MsgFont4\">+4: Phys/Almighty • +3: Dark/Curse/Supp  <material=\"MsgFont1\">-3: Elec/Light/Heal", // 127 Vetala
            "  <material=\"MsgFont4\">+4: Dark/Mind • +1: Supp  <material=\"MsgFont1\">-2: Heal • -5: Light", // 128 Legion
            "  <material=\"MsgFont4\">+3: Phys/Dark • +1: Heal/Supp  <material=\"MsgFont1\">-3: Ice • -4: Light", // 129 Yaka
            "  <material=\"MsgFont4\">+2: Phys/Fire/Dark  <material=\"MsgFont1\">-2: Heal • -4: Force/Light", // 130 Choronzon
            "  <material=\"MsgFont4\">+3: Dark/Curse • +1: Phys  <material=\"MsgFont1\">-1: Heal • -3: Magic/Light", // 131 Preta
            "  <material=\"MsgFont4\">+5: Dark • +3: Elec/Almighty/Supp  <material=\"MsgFont1\">-3: Heal • -5: Force/Light", // 132 Shadow
            "  <material=\"MsgFont4\">+5: Ailments • +2: Phys/Almighty  <material=\"MsgFont1\">-2: Elec/Light • -3: Heal", // 133 Black Ooze
            "  <material=\"MsgFont4\">+4: Ailments • +1: Phys/Almighty  <material=\"MsgFont1\">-2: Fire/Ice • -3: Light/Heal", // 134 Blob
            "  <material=\"MsgFont4\">+3: Ailments • +1: Phys  <material=\"MsgFont1\">-1: Heal/Supp • -3: Magic/Light", // 135 Slime
            "  <material=\"MsgFont4\">+3: Dark • +1: Fire/Ailments  <material=\"MsgFont1\">-1: Heal • -3: Light", // 136 Mou-Ryo
            "  <material=\"MsgFont4\">+1: Almighty/Ailments  <material=\"MsgFont1\">-3: Light/Heal", // 137 Will o' Wisp
            "  <material=\"MsgFont4\">+6: Phys/Almighty • +4: Magic/Light  <material=\"MsgFont1\">-6: Ailments", // 138 Michael
            "  <material=\"MsgFont4\">+6: Ice/Light • +4: Heal/Supp  <material=\"MsgFont1\">-4: Ailments • -6: Elec", // 139 Gabriel
            "  <material=\"MsgFont4\">+6: Force/Light • +4: Phys/Heal  <material=\"MsgFont1\">-4: Ailments • -6: Fire", // 140 Raphael
            "  <material=\"MsgFont4\">+6: Fire/Light • +4: Phys/Elec  <material=\"MsgFont1\">-4: Ailments • -6: Ice", // 141 Uriel
            "  <material=\"MsgFont4\">+6: Phys • +4: Force/Supp  <material=\"MsgFont1\">-6: Elec", // 142 Ganesha
            "  <material=\"MsgFont4\">+4: Phys • +2: Fire/Supp  <material=\"MsgFont1\">-4: Mind", // 143 Valkyrie
            "  <material=\"MsgFont4\">+3: Phys/Almighty/Supp  <material=\"MsgFont1\">-3: Magic", // 144 Arahabaki
            "  <material=\"MsgFont4\">+5: Force • +2: Phys/Light/Supp  <material=\"MsgFont1\">-5: Elec", // 145 Kurama Tengu
            "  <material=\"MsgFont4\">+5: Phys • +2: Supp  <material=\"MsgFont1\">-4: Dark/Ailments", // 146 Hanuman
            "  <material=\"MsgFont4\">+5: Phys/Force • +3: Supp  <material=\"MsgFont1\">-3: Elec", // 147 Cu Chulainn
            "  <material=\"MsgFont4\">+5: Force • +3: Ice/Light/Supp  <material=\"MsgFont1\">-3: Elec • -7: Fire", // 148 Qing Long
            "  <material=\"MsgFont4\">+5: Ice • +2: Supp  <material=\"MsgFont1\">-6: Elec", // 149 Xuanwu
            "  <material=\"MsgFont4\">+5: Phys/Elec • +2: Ailments/Supp  <material=\"MsgFont1\">-4: Force/Dark", // 150 Barong
            "  <material=\"MsgFont4\">+3: Heal • +2: Fire/Light/Supp  <material=\"MsgFont1\">-3: Almighty/Ailments", // 151 Makami
            "  <material=\"MsgFont4\">+7: Force • +3: Phys/Light/Supp  <material=\"MsgFont1\">-6: Dark/Elec", // 152 Garuda
            "  <material=\"MsgFont4\">+5: Force/Light • +2: Heal/Supp  <material=\"MsgFont1\">-7: Ice/Dark", // 153 Yatagarasu
            "  <material=\"MsgFont4\">+7: Force • +3: Elec/Dark/Supp  <material=\"MsgFont1\">-6: Light", // 154 Gurulu
            "  <material=\"MsgFont4\">+7: Phys • +3: Heal/Supp  <material=\"MsgFont1\">-4: Magic/Dark", // 155 Albion
            "", // 156 Manikin
            "", // 157 Manikin
            "", // 158 Manikin
            "", // 159 Manikin
            "", // 160 Manikin
            "  <material=\"MsgFont4\">+6: Almighty/Dark • +4: Fire/Ailments • +2: Heal/Supp  <material=\"MsgFont1\">-5: Elec/Light", // 161 Samael
            "", // 162 Manikin
            "", // 163 Manikin
            "", // 164 Manikin
            "", // 165 Manikin
            "", // 166 Manikin
            "  <material=\"MsgFont4\">+5: Ailments • +2: Elec/Dark/Supp  <material=\"MsgFont1\">-3: Fire/Light/Heal", // 167 Pisaca
            "  <material=\"MsgFont4\">+5: Dark • +2: Mind/Supp  <material=\"MsgFont1\">-7: Light", // 168 Kaiwan
            "  <material=\"MsgFont4\">+6: Phys • +2: Supp  <material=\"MsgFont1\">-2: Magic/Heal", // 169 Kin-Ki
            "  <material=\"MsgFont4\">+6: Ice • +2: Phys/Supp  <material=\"MsgFont1\">-2: Heal • -7: Fire", // 170 Sui-Ki
            "  <material=\"MsgFont4\">+6: Force • +2: Phys/Supp  <material=\"MsgFont1\">-2: Heal • -7: Elec", // 171 Fuu-Ki
            "  <material=\"MsgFont4\">+6: Phys/Dark • +3: Almighty/Ailments/Supp  <material=\"MsgFont1\">-2: Heal • -7: Light", // 172 Ongyo-Ki
            "  <material=\"MsgFont4\">+6: Light/Mind • +3: Almighty/Heal  <material=\"MsgFont1\">-5: Phys", // 173 Clotho
            "  <material=\"MsgFont4\">+6: Ailments • +4: Supp  <material=\"MsgFont1\">-5: Phys", // 174 Lachesis
            "  <material=\"MsgFont4\">+6: Magic • +4: Almighty  <material=\"MsgFont1\">-5: Phys", // 175 Atropos
            "  <material=\"MsgFont4\">+5: Dark/Ailments • +2: Supp  <material=\"MsgFont1\">-4: Light", // 176 Loa
            "  <material=\"MsgFont4\">+3: Phys/Dark/Ailments • +1: Supp  <material=\"MsgFont1\">-2: Heal • -4: Ice/Light", // 177 Chatterskull
            "  <material=\"MsgFont4\">+5: Elec • +2: Almighty/Supp  <material=\"MsgFont1\">-4: Force/Light/Heal", // 178 Phantom
            "", // 179 
            "", // 180 
            "", // 181 
            "", // 182 
            "", // 183 
            "", // 184 
            "", // 185 
            "", // 186 
            "", // 187 
            "", // 188 
            "", // 189 
            "", // 190 
            "", // 191 
            "  <material=\"MsgFont4\">+6: Phys/Elec/Force • +4: Almighty/Supp<material=\"MsgFont1\">", // 192 Raidou/Dante
            "  <material=\"MsgFont4\">+7: Phys/Fire/Almighty/Light • +4: Supp  <material=\"MsgFont1\">-4: Heal • -7: Ice/Dark", // 193 Metatron
            "  <material=\"MsgFont4\">+7: Elec/Force/Almighty/Dark • +4: Supp  <material=\"MsgFont1\">-4: Heal • -7: Fire/Light", // 194 Beelzebub (Fly)
            "  <material=\"MsgFont4\">+7: Ailments • +4: Phys/Almighty • +2: Supp  <material=\"MsgFont1\">-5: Fire/Elec", // 195 Pale Rider
            "  <material=\"MsgFont4\">+7: Light • +5: Fire • +3: Supp  <material=\"MsgFont1\">-5: Elec/Dark", // 196 White Rider
            "  <material=\"MsgFont4\">+6: Phys • +4: Elec/Force • +2: Supp  <material=\"MsgFont1\">-5: Fire/Ice", // 197 Red Rider
            "  <material=\"MsgFont4\">+7: Ice • +5: Almighty • +3: Dark/Supp  <material=\"MsgFont1\">-5: Elec/Force", // 198 Black Rider
            "  <material=\"MsgFont4\">+4: Phys/Force • +2: Supp  <material=\"MsgFont1\">-4: Ice/Elec", // 199 Matador
            "  <material=\"MsgFont4\">+4: Fire/Force • +3: Phys/Supp  <material=\"MsgFont1\">-4: Ice/Light", // 200 Hell Biker
            "  <material=\"MsgFont4\">+4: Light/Dark/Mind • +2: Heal  <material=\"MsgFont1\">-4: Phys/Fire", // 201 Daisoujou
            "  <material=\"MsgFont4\">+5: Elec/Almighty • +3: Ailments/Supp  <material=\"MsgFont1\">-6: Ice/Force", // 202 Mother Harlot
            "  <material=\"MsgFont4\">+7: Almighty • +5: Magic  <material=\"MsgFont1\">-7: Phys", // 203 Trumpeter
            "", // 204 Futomimi
            "", // 205 Sakahagi
            "  <material=\"MsgFont4\">+6: Ice/Dark • +3: Supp  <material=\"MsgFont1\">-3: Heal • -7: Light", // 206 Black Frost
            "  <material=\"MsgFont4\">+6: Elec/Force/Dark • +3: Almighty/Supp  <material=\"MsgFont1\">-4: Heal • -7: Fire/Light", // 207 Beelzebub (Man)
            "", // 208 
            "", // 209 
            "", // 210 
            "", // 211 
            "", // 212 
            "", // 213 
            "", // 214 
            "", // 215 
            "", // 216 
            "", // 217 
            "", // 218 
            "", // 219 
            "", // 220 
            "", // 221 
            "", // 222 
            "", // 223 
            "", // 224 
            "", // 225 
            "", // 226 
            "", // 227 
            "", // 228 
            "", // 229 
            "", // 230 
            "", // 231 
            "", // 232 
            "", // 233 
            "", // 234 
            "", // 235 
            "", // 236 
            "", // 237 
            "", // 238 
            "", // 239 
            "", // 240 
            "", // 241 
            "", // 242 
            "", // 243 
            "", // 244 
            "", // 245 
            "", // 246 
            "", // 247 
            "", // 248 
            "", // 249 
            "", // 250 
            "", // 251 
            "", // 252 
            "", // 253 
            "", // 254 
            "", // 255 
            "", // 256 Boss Forneus
            "", // 257 Boss Specter 1 (Mini)
            "", // 258 Boss Ahriman 2
            "", // 259 Boss Noah 2
            "", // 260 Forced Incubus
            "", // 261 Forced Koppa Tengu
            "", // 262 Forced Kaiwan
            "", // 263 Boss Ose
            "", // 264 Boss Kagutsuchi 2
            "", // 265 Ambush Mizuchi
            "", // 266 Boss Kin-Ki
            "", // 267 Boss Sui-Ki
            "", // 268 Boss Fuu-Ki
            "", // 269 Boss Ongyo-Ki
            "", // 270 Boss Clotho (Solo)
            "", // 271 Boss Lachesis (Solo)
            "", // 272 Boss Atropos (Solo)
            "", // 273 Boss Specter 2
            "", // 274 Boss Girimekhala
            "", // 275 Boss Specter 3
            "", // 276 Boss Aciel
            "", // 277 Boss Skadi
            "", // 278 Boss Albion
            "", // 279 Boss Urthona
            "", // 280 Boss Urizen
            "", // 281 Boss Luvah
            "", // 282 Boss Tharmus
            "", // 283 Boss Futomimi
            "", // 284 Boss Gabriel
            "", // 285 Boss Raphael
            "", // 286 Boss Uriel
            "", // 287 Boss Samael
            "", // 288 Boss Baal Avatar
            "", // 289 Boss Ose Hallel
            "", // 290 Boss Flauros Hallel
            "", // 291 Boss Ahriman 1
            "", // 292 Boss Noah 1
            "", // 293 Boss Kagutsuchi 1
            "", // 294 Boss Specter 1 (Merged 6)
            "", // 295 Boss Specter 1 (Merged 4-5)
            "", // 296 Boss Specter 1 (Merged 2-3)
            "", // 297 Boss Mizuchi
            "", // 298 
            "", // 299 Boss Sakahagi
            "", // 300 Boss Orthrus
            "", // 301 Boss Yaksini
            "", // 302 Boss Thor
            "", // 303 Boss Black Frost
            "", // 304 Ambush Karasu Tengu
            "", // 305 Ambush Karasu Tengu
            "", // 306 Ambush Karasu Tengu
            "", // 307 Boss Eligor
            "", // 308 Boss Eligor
            "", // 309 Boss Eligor
            "", // 310 Ambush Kelpie
            "", // 311 Ambush Kelpie
            "", // 312 Boss Berith
            "", // 313 Boss Succubus
            "", // 314 Ambush High Pixie
            "", // 315 Boss Kaiwan
            "", // 316 Forced Nekomata
            "", // 317 Boss Troll
            "", // 318 Forced Will o' Wisp
            "", // 319 Forced Preta
            "", // 320 Boss Bishamonten 1
            "", // 321 Boss Mara
            "", // 322 Boss Bishamonten 2
            "", // 323 Boss Jikokuten
            "", // 324 Boss Koumokuten
            "", // 325 Boss Zouchouten
            "", // 326 Boss Clotho (Together)
            "", // 327 Boss Lachesis (Together)
            "", // 328 Boss Atropos (Together)
            "", // 329 Boss Mitra
            "", // 330 
            "", // 331 
            "", // 332 
            "", // 333 Boss Mada
            "", // 334 Boss Mot
            "", // 335 Boss Surt
            "", // 336 Ambush Jack-o'-Lantern
            "", // 337 Boss Thor 2
            "", // 338 
            "", // 339 Boss Raidou/Dante 1
            "", // 340 Chase Raidou/Dante
            "", // 341 Boss Raidou/Dante 2
            "", // 342 Boss Metatron
            "", // 343 Boss Beelzebub
            "", // 344 Boss Lucifer
            "", // 345 Boss Pale Rider
            "", // 346 Boss White Rider
            "", // 347 Boss Red Rider
            "", // 348 Boss Black Rider
            "", // 349 Boss Matador
            "", // 350 Boss Hell Biker
            "", // 351 Boss Daisoujou
            "", // 352 Boss Mother Harlot
            "", // 353 Boss Trumpeter
            "", // 354 
            "", // 355 
            "", // 356 
            "", // 357 
            "", // 358 Boss Loa
            "", // 359 Boss Virtue
            "", // 360 Boss Power
            "", // 361 Boss Legion
            "", // 362 
            "", // 363 
            "", // 364 
            "", // 365 
            "", // 366 
            "", // 367 
            "", // 368 
            "", // 369 
            "", // 370 
            "", // 371 
            "", // 372 
            "", // 373 
            "", // 374 
            "", // 375 
            "", // 376 
            "", // 377 
            "", // 378 
            "", // 379 
            "", // 380 
            "", // 381 
            "", // 382 
            "", // 383 
            "  <material=\"MsgFont4\">+1: Phys<material=\"MsgFont1\">", // 384 Marogareh
            "  <material=\"MsgFont4\">+1: Phys<material=\"MsgFont1\">", // 385 Marogareh
            "  <material=\"MsgFont4\">+3: Ice • +1: Supp<material=\"MsgFont1\">", // 386 Wadatsumi
            "  <material=\"MsgFont4\">+3: Ice • +1: Supp<material=\"MsgFont1\">", // 387 Wadatsumi
            "  <material=\"MsgFont4\">+3: Heal • +1: Light<material=\"MsgFont1\">", // 388 Ankh
            "  <material=\"MsgFont4\">+3: Heal • +1: Light<material=\"MsgFont1\">", // 389 Ankh
            "  <material=\"MsgFont4\">+3: Supp<material=\"MsgFont1\">", // 390 Iyomante
            "  <material=\"MsgFont4\">+3: Supp<material=\"MsgFont1\">", // 391 Iyomante
            "  <material=\"MsgFont4\">+3: Fire • +1: Supp<material=\"MsgFont1\">", // 392 Shiranui
            "  <material=\"MsgFont4\">+3: Fire • +1: Supp<material=\"MsgFont1\">", // 393 Shiranui
            "  <material=\"MsgFont4\">+3: Force • +1: Supp<material=\"MsgFont1\">", // 394 Hifumi
            "  <material=\"MsgFont4\">+3: Force • +1: Supp<material=\"MsgFont1\">", // 395 Hifumi
            "  <material=\"MsgFont4\">+3: Phys<material=\"MsgFont1\">", // 396 Kamudo
            "  <material=\"MsgFont4\">+3: Phys<material=\"MsgFont1\">", // 397 Kamudo
            "  <material=\"MsgFont4\">+5: Elec<material=\"MsgFont1\">", // 398 Narukami
            "  <material=\"MsgFont4\">+5: Elec<material=\"MsgFont1\">", // 399 Narukami
            "  <material=\"MsgFont4\">+5: Dark<material=\"MsgFont1\">", // 400 Anathema
            "  <material=\"MsgFont4\">+5: Dark<material=\"MsgFont1\">", // 401 Anathema
            "  <material=\"MsgFont4\">+6: Ice • +2: Ailments<material=\"MsgFont1\">", // 402 Miasma
            "  <material=\"MsgFont4\">+6: Ice • +2: Ailments<material=\"MsgFont1\">", // 403 Miasma
            "  <material=\"MsgFont4\">+5: Light • +3: Phys<material=\"MsgFont1\">", // 404 Nirvana
            "  <material=\"MsgFont4\">+5: Light • +3: Phys<material=\"MsgFont1\">", // 405 Nirvana
            "  <material=\"MsgFont4\">+4: Phys • +2: Ailments<material=\"MsgFont1\">", // 406 Murakumo
            "  <material=\"MsgFont4\">+4: Phys • +2: Ailments<material=\"MsgFont1\">", // 407 Murakumo
            "  <material=\"MsgFont4\">+5: Light/Heal • +3: Supp<material=\"MsgFont1\">", // 408 Geis
            "  <material=\"MsgFont4\">+5: Light/Heal • +3: Supp<material=\"MsgFont1\">", // 409 Geis
            "  <material=\"MsgFont4\">+5: Ailments/Supp<material=\"MsgFont1\">", // 410 Djed
            "  <material=\"MsgFont4\">+5: Ailments/Supp<material=\"MsgFont1\">", // 411 Djed
            "  <material=\"MsgFont4\">+7: Ailments • +3: Magic<material=\"MsgFont1\">", // 412 Muspell
            "  <material=\"MsgFont4\">+7: Ailments • +3: Magic<material=\"MsgFont1\">", // 413 Muspell
            "  <material=\"MsgFont4\">+7: Fire • +3: Dark<material=\"MsgFont1\">", // 414 Gehenna
            "  <material=\"MsgFont4\">+7: Fire • +3: Dark<material=\"MsgFont1\">", // 415 Gehenna
            "  <material=\"MsgFont4\">+7: Phys<material=\"MsgFont1\">", // 416 Kamurogi
            "  <material=\"MsgFont4\">+7: Phys<material=\"MsgFont1\">", // 417 Kamurogi
            "  <material=\"MsgFont4\">+8: Dark • +2: Phys/Supp<material=\"MsgFont1\">", // 418 Satan
            "  <material=\"MsgFont4\">+8: Dark • +2: Phys/Supp<material=\"MsgFont1\">", // 419 Satan
            "  <material=\"MsgFont4\">+9: Elec<material=\"MsgFont1\">", // 420 Adama
            "  <material=\"MsgFont4\">+9: Elec<material=\"MsgFont1\">", // 421 Adama
            "  <material=\"MsgFont4\">+6: Phys • +3: Supp<material=\"MsgFont1\">", // 422 Vimana
            "  <material=\"MsgFont4\">+6: Phys • +3: Supp<material=\"MsgFont1\">", // 423 Vimana
            "  <material=\"MsgFont4\">+8: Force • +4: Phys<material=\"MsgFont1\">", // 424 Gundari
            "  <material=\"MsgFont4\">+8: Force • +4: Phys<material=\"MsgFont1\">", // 425 Gundari
            "  <material=\"MsgFont4\">+7: Light/Heal<material=\"MsgFont1\">", // 426 Sophia
            "  <material=\"MsgFont4\">+7: Light/Heal<material=\"MsgFont1\">", // 427 Sophia
            "  <material=\"MsgFont4\">+9: Phys<material=\"MsgFont1\">", // 428 Gaea
            "  <material=\"MsgFont4\">+9: Phys<material=\"MsgFont1\">", // 429 Gaea
            "  <material=\"MsgFont4\">+7: Almighty • +5: Magic • +3: Supp<material=\"MsgFont1\">", // 430 Kailash
            "  <material=\"MsgFont4\">+7: Almighty • +5: Magic • +3: Supp<material=\"MsgFont1\">", // 430 Kailash
            "  <material=\"MsgFont4\">+9: Phys/Magic/Almighty/Ailments • +5: Heal/Supp<material=\"MsgFont1\">", // 432 Masakados
            "  <material=\"MsgFont4\">+9: Phys/Magic/Almighty/Ailments • +5: Heal/Supp<material=\"MsgFont1\">", // 433 Masakados
            "", // 434 
            "", // 435 
            "", // 436 
            ""  // 437 
        }; // Array of all demons' skill potential

        private static string[] magatamaHelp = new string[]
        {
            "",
            "Imparts Physical skills\r\nNormal resistance\r\n" +
            "<material=\"MsgFont4\">+1: Phys", // Marogareh
            "Imparts Ice magic\r\n<material=\"MsgFont2\">Null: Ice<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Elec\r\n" +
            "<material=\"MsgFont4\">+3: Ice • +1: Supp", // Wadatsumi
            "Imparts Healing magic\r\n<material=\"MsgFont2\">Null: Light<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Dark\r\n" +
            "<material=\"MsgFont4\">+3: Heal • +1: Light", // Ankh
            "Imparts Support magic\r\n<material=\"MsgFont2\">Null: Mind\r\n" +
            "<material=\"MsgFont4\">+3: Supp", // Iyomante
            "Imparts Fire magic\r\n<material=\"MsgFont2\">Null: Fire<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Force\r\n" +
            "<material=\"MsgFont4\">+3: Fire • +1: Supp", // Shiranui
            "Imparts Force magic\r\n<material=\"MsgFont2\">Null: Force<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Fire\r\n" +
            "<material=\"MsgFont4\">+3: Force • +1: Supp", // Hifumi
            "Imparts Physical skills\r\n<material=\"MsgFont2\">Strong: Phys<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Ailments\r\n" +
            "<material=\"MsgFont4\">+3: Phys", // Kamudo
            "Imparts Electricity magic\r\n<material=\"MsgFont2\">Null: Elec<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Ice\r\n" +
            "<material=\"MsgFont4\">+5: Elec", // Narukami
            "Imparts Dark magic\r\n<material=\"MsgFont2\">Null: Dark<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Light\r\n" +
            "<material=\"MsgFont4\">+5: Dark", // Anathema
            "Imparts Ice magic\r\n<material=\"MsgFont2\">Null: Ice<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Fire\r\n" +
            "<material=\"MsgFont4\">+6: Ice • +2: Ailments", // Miasma
            "Imparts Light magic\r\n<material=\"MsgFont2\">Null: Light<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Dark\r\n" +
            "<material=\"MsgFont4\">+5: Light • +3: Phys", // Nirvana
            "Imparts Ailment-nullifying skills\r\n<material=\"MsgFont2\">Strong: Phys<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Fire/Ice\r\n" +
            "<material=\"MsgFont4\">+4: Phys • +2: Ailments", // Murakumo
            "Imparts Healing magic\r\n<material=\"MsgFont2\">Null: Light\r\n" +
            "<material=\"MsgFont4\">+5: Light/Heal • +3: Supp", // Geis
            "Imparts Support magic\r\n<material=\"MsgFont2\">Null: Curse\r\n" +
            "<material=\"MsgFont4\">+5: Ailments/Supp", // Djed
            "Imparts Ailment magic\r\n<material=\"MsgFont2\">Strong: Ailments\r\n" +
            "<material=\"MsgFont4\">+7: Ailments • +3: Magic", // Muspell
            "Imparts Fire magic\r\n<material=\"MsgFont2\">Drain: Fire<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Ice\r\n" +
            "<material=\"MsgFont4\">+7: Fire • +3: Dark", // Gehenna
            "Imparts Physical skills\r\n<material=\"MsgFont2\">Strong: Phys<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: All types of magic\r\n" +
            "<material=\"MsgFont4\">+7: Phys", // Kamurogi
            "Imparts Special skills\r\n<material=\"MsgFont2\">Null: Dark<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Light\r\n" +
            "<material=\"MsgFont4\">+8: Dark • +2: Phys/Supp", // Satan
            "Imparts Electricity magic\r\n<material=\"MsgFont2\">Repel: Elec<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Force\r\n" +
            "<material=\"MsgFont4\">+9: Elec", // Adama
            "Imparts Physical skills\r\n<material=\"MsgFont2\">Null: Nerve\r\n" +
            "<material=\"MsgFont4\">+6: Phys • +3: Supp", // Vimana
            "Imparts Force magic\r\n<material=\"MsgFont2\">Drain: Force<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Elec\r\n" +
            "<material=\"MsgFont4\">+8: Force • +4: Phys", // Gundari
            "Imparts Healing magic\r\n<material=\"MsgFont2\">Null: Light\r\n" +
            "<material=\"MsgFont4\">+7: Light/Heal", // Sophia
            "Imparts Physical skills\r\n<material=\"MsgFont2\">Strong: Phys<material=\"MsgFont0\">  <material=\"MsgFont1\">Weak: Force/Light/Dark\r\n" +
            "<material=\"MsgFont4\">+9: Phys", // Gaea
            "Imparts Almighty magic\r\nNormal resistance\r\n" +
            "<material=\"MsgFont4\">+7: Almighty • +5: Magic • +3: Supp", // Kailash
            "Magatama that holds ultimate power\r\n<material=\"MsgFont2\">Null: All except Almighty\r\n" +
            "<material=\"MsgFont4\">+9: Phys/Magic/Almighty/Ailments • +5: Heal/Supp"  // Masakados
        };

        static private int currentDemonID = 0; // Used to get the associated demon when displaying the potential of a skill

        static private datNormalSkill_t tmp_datNormalSkill = new datNormalSkill_t(); // Used to temporarily store a skill before modifications



        /*********************************************************************************************
         * DISPLAY SKILL POTENTIAL VALUES
         *********************************************************************************************/
        [HarmonyPatch(typeof(cmpDrawStatus), nameof(cmpDrawStatus.cmpDrawSkill))]
        private class SkillPotentialPatch
        {
            public static void Prefix(datUnitWork_t pStock)
            {
                currentDemonID = pStock.id; // Remember the current demon when displaying skills on the status screen
            }
        }

        [HarmonyPatch(typeof(cmpDrawSkill), nameof(cmpDrawSkill.cmpSkillNameCostDraw))]
        private class SkillPotentialPatch2
        {
            public static void Prefix(datUnitWork_t pStock)
            {
                currentDemonID = pStock.id; // Remember the current demon when displaying skills on the "Skill" submenu
            }
        }

        [HarmonyPatch(typeof(nbMainProcess), nameof(nbMainProcess.nbSetActionMaePhase))]
        private class SkillPotentialPatch3
        {
            public static void Prefix(ref nbMainProcessData_t data)
            {
                if (actionProcessData != null)
                {
                    if (actionProcessData.work.badstatus == 4 || // Asleep
                        actionProcessData.work.badstatus == 16 || // Bound
                        actionProcessData.work.badstatus == 32 || // 
                        actionProcessData.work.badstatus == 64 || //
                        actionProcessData.work.badstatus == 256) // Stunned
                    {
                        var luk = datCalc.datGetParam(actionProcessData.work, 5) + 20;
                        if (datCalc.datCheckSyojiSkill(actionProcessData.work, 366) != 0)
                            luk += 20;
                        var rand = dds3KernelCore.dds3GetRandIntA(100);

                        if (rand < luk)
                        {
                            var form = actionProcessData.form;
                            nbMakePacket.nbMakeBadKaifukuPacket(0, actionProcessData.uniqueid, ref form);
                        }
                    }
                }

                if (data.activeunit >= 0)
                {
                    var unitFormIndex = data.party[data.activeunit].formindex;
                    currentDemonID = nbMainProcess.nbGetUnitWorkFromFormindex(unitFormIndex).id;
                }
            }
        }

        [HarmonyPatch(typeof(datSkillName), nameof(datSkillName.Get))] // After getting the name of a skill
        private class SkillPotentialPatch4
        {
            public static void Postfix(ref int id, ref string __result)
            {
                if (id < 288 || id > 421) // If it isn't a passive skill
                {
                    sbyte skillPotential = 0;
                    if (id != 164 && id != 165 && id != 166)
                        skillPotential = SkillPotentialUtility.GetSkillPotential(id, currentDemonID);
                    else
                        skillPotential = SkillPotentialUtility.GetSkillPotential(id, nbMainProcess.nbGetUnitWorkFromFormindex(nbMainProcess.nbGetMainProcessData().party[actionProcessData.partyindex].formindex).id);

                    if (skillPotential != 0)
                    {
                        __result += " " + (skillPotential > 0 ? "+" + skillPotential : $"{skillPotential}"); // Add "+X" or "-Y" at the end of the skill's name
                    }
                }
            }
        }

        /*********************************************************************************************
         * ADJUST SKILL COST WITH POTENTIAL
         *********************************************************************************************/
        [HarmonyPatch(typeof(datCalc), nameof(datCalc.datGetSkillCost))] 
        private class SkillPotentialPatch5
        {
            public static void Prefix(ref datUnitWork_t w, ref int nskill) // Before getting the cost of a skill during battle
            {
                if (nskill < 288 || nskill > 421) // If it isn't a passive skill
                {
                    tmp_datNormalSkill.cost = datNormalSkill.tbl[nskill].cost; // Memorize the original skill cost

                    sbyte skillPotential = SkillPotentialUtility.GetSkillPotential(nskill, w.id);

                    if (skillPotential != 0)
                    {
                        datNormalSkill.tbl[nskill].cost = SkillPotentialUtility.ApplySkillPotentialCost(nskill, skillPotential); // Update the skill cost
                    }
                }
            }
            public static void Postfix(ref datUnitWork_t w, ref int nskill, ref int __result) // After getting the cost of a skill during battle
            {
                if (nskill < datNormalSkill.tbl.Length)
                {
                    datNormalSkill.tbl[nskill].cost = tmp_datNormalSkill.cost; // Revert the skill cost
                }
            }
        }

        [HarmonyPatch(typeof(cmpDrawSkill), nameof(cmpDrawSkill.cmpSkillNameCostDraw))] 
        private class SkillPotentialPatch6
        {
            public static bool Prefix(ref int idx, ref uint Col, ref ushort SkillID, ref datUnitWork_t pStock, 
                                        ref sbyte MskFlag, ref sbyte SelFlag, ref int MatCol) // Before getting the cost of a skill for display outside of battle
            {
                int cost;
                bool numDraw = false;
                uint ctype;

                if (SkillID < 288 || SkillID > 421) // If it isn't a passive skill
                {
                    tmp_datNormalSkill.cost = datNormalSkill.tbl[SkillID].cost; // Memorize the original skill cost

                    sbyte skillPotential = SkillPotentialUtility.GetSkillPotential(SkillID, pStock.id);

                    if (skillPotential != 0)
                    {
                        datNormalSkill.tbl[SkillID].cost = SkillPotentialUtility.ApplySkillPotentialCost(SkillID, skillPotential); // Update the skill cost
                    }

                    cost = cmpDrawSkill.cmpGetSkillCost(SkillID, pStock);
                    if (cost != 0)
                        numDraw = true;
                    ctype = (uint)datNormalSkill.tbl[SkillID].costtype;
                }
                else if (MskFlag == 0)
                {
                    cost = -2;
                    ctype = 0;
                    if (SelFlag == 0)
                        cost = -1;
                }
                else
                {
                    cost = -1;
                    ctype = 0;
                }

                var text = datSkillName.Get(SkillID);
                cmpInit.cmpItemTextSet(idx, text, Col, 1, (int)ctype, numDraw, cost, 0, SelFlag, MskFlag);

                return false;
            }
            public static void Postfix(ref ushort SkillID) // After getting the cost of a skill for display outside of battle
            {
                if (SkillID < datNormalSkill.tbl.Length)
                {
                    datNormalSkill.tbl[SkillID].cost = tmp_datNormalSkill.cost; // Revert the skill cost
                }
            }
        }

        [HarmonyPatch(typeof(cmpCalc), nameof(cmpCalc.cmpUseSkill))]
        private class SkillPotentialPatch7
        {
            public static void Prefix() // Before using a skill from the Command Menu
            {
                int nskill = cmpCalc.cmpGetSelectSkillID(); // Get the used skill
                datUnitWork_t work = cmpCalc.cmpGetSelectSrcStock(); // Get the demon's ID

                if (nskill < 288 || nskill > 421) // If it isn't a passive skill
                {
                    tmp_datNormalSkill.cost = datNormalSkill.tbl[nskill].cost; // Memorize the original skill cost
                    sbyte skillPotential = SkillPotentialUtility.GetSkillPotential(nskill, work.id);

                    if (skillPotential != 0)
                    {
                        datNormalSkill.tbl[nskill].cost = SkillPotentialUtility.ApplySkillPotentialCost(nskill, skillPotential); // Update the skill cost
                    }
                }
            }
            public static void Postfix() // After using a skill from the Command Menu
            {
                int nskill = cmpCalc.cmpGetSelectSkillID();

                if (nskill < datNormalSkill.tbl.Length)
                {
                    datNormalSkill.tbl[nskill].cost = tmp_datNormalSkill.cost; // Revert the skill cost
                }
            }
        }

        /*********************************************************************************************
         * ADJUST HEAL WITH POTENTIAL (OUTSIDE OF BATTLE)
         *********************************************************************************************/
        [HarmonyPatch(typeof(datCalc), nameof(datCalc.datGetSkillKouka))] // After using a Heal skill from the Command Menu
        private class SkillPotentialPatch8
        {
            public static void Postfix(ref int nskill, ref int type, ref datUnitWork_t s, ref int __result)
            {
                if ((nskill < 288 || nskill > 421) && type == 0) // If it isn't a passive skill and the method is called for the first time
                {
                    sbyte skillPotential = SkillPotentialUtility.GetSkillPotential(nskill, s.id);

                    if (skillPotential != 0)
                    {
                        __result = Convert.ToInt32(SkillPotentialUtility.ApplyHealMultiplier(skillPotential, __result));
                    }
                }
            }
        }

        /*********************************************************************************************
         * ADJUST DAMAGE/HEAL WITH POTENTIAL (DURING BATTLE)
         *********************************************************************************************/
        [HarmonyPatch(typeof(nbCalc), nameof(nbCalc.nbGetKoukaHp))] // After altering HP during battle
        private class SkillPotentialPatch9
        {
            public static void Postfix(ref int nskill, ref int sformindex, ref int __result)
            {
                if ((nskill < 288 || nskill > 421) && __result != -1) // If it isn't a passive skill and HP have been altered
                {
                    int demonID = nbMainProcess.nbGetUnitWorkFromFormindex(sformindex).id; // Get the demon's ID
                    sbyte skillPotential = SkillPotentialUtility.GetSkillPotential(nskill, demonID);

                    if (skillPotential != 0)
                    {
                        bool healsHP = datNormalSkill.tbl[nskill].hptype == 2; // If the skill heals HP

                        if (healsHP)
                        {
                            __result = Convert.ToInt32(SkillPotentialUtility.ApplyHealMultiplier(skillPotential, __result));
                        }
                        else
                        {
                            __result = Convert.ToInt32(SkillPotentialUtility.ApplyDamageMultiplier(skillPotential, __result));
                        }
                    }
                }
            }
        }

        [HarmonyPatch(typeof(nbCalc), nameof(nbCalc.nbGetKoukaMp))]
        private class SkillPotentialPatch10
        {
            public static void Postfix(ref int nskill, ref int sformindex, ref int __result)
            {
                if ((nskill < 288 || nskill > 421) && __result != -1) // If it isn't a passive skill and MP have been altered
                {
                    int demonID = nbMainProcess.nbGetUnitWorkFromFormindex(sformindex).id; // Get the demon's ID
                    sbyte skillPotential = SkillPotentialUtility.GetSkillPotential(nskill, demonID);

                    if (skillPotential != 0)
                    {
                        bool healsMP = datNormalSkill.tbl[nskill].mptype == 5; // If the skill heals MP

                        if (healsMP)
                        {
                            __result = Convert.ToInt32(SkillPotentialUtility.ApplyHealMultiplier(skillPotential, __result));
                        }
                        else
                        {
                            __result = Convert.ToInt32(SkillPotentialUtility.ApplyDamageMultiplier(skillPotential, __result));
                        }
                    }
                }
            }
        }

        /*********************************************************************************************
         * ADJUST AILMENT RATE WITH POTENTIAL
         *********************************************************************************************/
        [HarmonyPatch(typeof(nbCalc), nameof(nbCalc.nbGetKoukaBadDamage))] 
        private class SkillPotentialPatch11
        {
            public static void Prefix(ref int nskill, ref int sformindex) // Before attempting to inflinct an ailment
            {
                if ((nskill < 288 || nskill > 421) && datNormalSkill.tbl[nskill].badlevel != 255) // If it isn't a passive skill
                {
                    tmp_datNormalSkill.badlevel = datNormalSkill.tbl[nskill].badlevel; // Memorize the original ailment rate
                    
                    var work = nbMainProcess.nbGetUnitWorkFromFormindex(sformindex);
                    var luk = datCalc.datGetParam(work, 5);

                    int demonID = nbMainProcess.nbGetUnitWorkFromFormindex(sformindex).id; // Get the demon's ID

                    sbyte skillPotential = SkillPotentialUtility.GetSkillPotential(nskill, demonID);

                    datNormalSkill.tbl[nskill].badlevel = Convert.ToByte(SkillPotentialUtility.ApplyAilmentMultiplier(skillPotential, luk, tmp_datNormalSkill.badlevel));
                }
            }

            public static void Postfix(ref int nskill) // After attempting to inflinct an ailment
            {
                if ((nskill < 288 || nskill > 421) && datNormalSkill.tbl[nskill].badlevel != 255)
                {
                    datNormalSkill.tbl[nskill].badlevel = tmp_datNormalSkill.badlevel; // Revert the ailment rate
                }
            }
        }

        /*********************************************************************************************
         * APPEND POTENTIAL TEXT TO AFFINITY TEXT
         *********************************************************************************************/
        [HarmonyPatch(typeof(datAisyoName), nameof(datAisyoName.Get))]
        private class SkillPotentialPatch12
        {
            public static void Postfix(ref int id, ref string __result)
            {
                __result += potentialHelp[id];
            }
        }

        /*********************************************************************************************
         * REPLACE MAGATAMA HELP TEXT
         *********************************************************************************************/
        [HarmonyPatch(typeof(datHeartsHelp_msg), nameof(datHeartsHelp_msg.Get))]
        private class SkillPotentialPatch13
        {
            public static bool Prefix(ref int id, ref string __result)
            {
                __result = magatamaHelp[id];
                return false;
            }
        }

        /*********************************************************************************************
         * EXTEND AFFINITY TEXT RECTANGLE IN STATUS SCREEN
         *********************************************************************************************/
        [HarmonyPatch(typeof(cmpDrawStatus), nameof(cmpDrawStatus.cmpDrawAisyoHelp))]
        private class SkillPotentialPatch14
        {
            public static void Postfix()
            {
                cmpStatus._statusUIScr.aisyoText.rectTransform.offsetMax = new Vector2(3500, -20);
                cmpStatus._statusUIScr.aisyoText.rectTransform.sizeDelta = new Vector2(3500, 44);
            }
        }

        /*********************************************************************************************
         * DISPLAY CORRECT POTENTIAL VALUES IN ANALYZE PANEL
         *********************************************************************************************/
        [HarmonyPatch(typeof(nbPanelProcess), nameof(nbPanelProcess.nbPanelAnalyzeDraw))]
        private class SkillPotentialPatch15
        {
            public static void Prefix(ref datUnitWork_t pUnitWork)
            {
                currentDemonID = pUnitWork.id;
            }
        }

        /*********************************************************************************************
         * REMOVE POTENTIAL TEXT FROM ATTRIBUTES IN ANALYZE PANEL
         *********************************************************************************************/
        [HarmonyPatch(typeof(nbPanelProcess), nameof(nbPanelProcess.nbPanelAnalyzeRun))]
        private class SkillPotentialPatch16
        {
            public static void Postfix()
            {
                try
                {
                    var regex = new Regex("  .*");
                    nbMainProcess.GetBattleUI(5).transform.Find("banalyze_attribute/banalyze_attribute_textTM").gameObject.GetComponent<TextMeshProUGUI>().text
                        = regex.Replace(nbMainProcess.GetBattleUI(5).transform.Find("banalyze_attribute/banalyze_attribute_textTM").gameObject.GetComponent<TextMeshProUGUI>().text, string.Empty);
                }
                catch { }
            }
        }

        /*********************************************************************************************
         * UTILITY FUNCTIONS
         *********************************************************************************************/
        private class SkillPotentialUtility
        {
            public static sbyte GetSkillPotential(int skillID, int demonID)
            {
                sbyte skillAttribute = datSkill.tbl[skillID].skillattr; // Get the attribute of the skill

                if (skillAttribute != -1) // Filters a lot of unused skills
                {
                    sbyte skillType = datSkill.tbl[skillID].type;

                    /*byte skillBadType;
                    if (skillID < datNormalSkill.tbl.Length)
                        skillBadType = datNormalSkill.tbl[skillID].badtype; // Get the ailment type if it exists
                    else
                        skillBadType = 1;*/

                    sbyte skillPotential;
                    if (demonID == 0) // If the curent demon is Demi-fiend
                    {
                        skillPotential = magatamaPotentials[dds3GlobalWork.DDS3_GBWK.heartsequip - 1][skillAttribute]; // Get the potential from the currently equipped Magatama
                    }
                    else
                    {
                        skillPotential = demonPotentials[demonID][skillAttribute]; // Get the potential from the demon list
                    }

                    if (skillType == 0) // Filters passive and special skills
                    {
                        //if (skillAttribute != 13 || (skillAttribute == 13 && skillBadType == 0)) // Retrict Heal skills to those that don't fully heal nor revive or cure
                        //{
                        return skillPotential;
                        //}
                    }
                }

                return 0;
            }

            public static ushort ApplySkillPotentialCost(int skillID, sbyte skillPotential)
            {
                float multiplier = 1;
                bool IsAttackingType = datSkill.tbl[skillID].skillattr < 12;

                switch (skillPotential)
                {
                    case 9:
                        multiplier = 1 / 1.5f;
                        break;
                    case 8:
                        multiplier = 1 / 1.45f;
                        break;
                    case 7:
                        multiplier = 1 / 1.4f;
                        break;
                    case 6:
                        multiplier = 1 / 1.35f;
                        break;
                    case 5:
                        multiplier = IsAttackingType ? 1 / 1.30f : 1 / 1.5f;
                        break;
                    case 4:
                        multiplier = IsAttackingType ? 1 / 1.25f : 1 / 1.4f;
                        break;
                    case 3:
                        multiplier = IsAttackingType ? 1 / 1.2f : 1 / 1.3f;
                        break;
                    case 2:
                        multiplier = IsAttackingType ? 1 / 1.15f : 1 / 1.2f;
                        break;
                    case 1:
                        multiplier = IsAttackingType ? 1 / 1.1f : 1 / 1.1f;
                        break;
                    case -1:
                        multiplier = IsAttackingType ? 1.1f : 1.1f;
                        break;
                    case -2:
                        multiplier = IsAttackingType ? 1.15f : 1.2f;
                        break;
                    case -3:
                        multiplier = IsAttackingType ? 1.2f : 1.3f;
                        break;
                    case -4:
                        multiplier = IsAttackingType ? 1.25f : 1.4f;
                        break;
                    case -5:
                        multiplier = IsAttackingType ? 1.3f : 1.5f;
                        break;
                    case -6:
                        multiplier = 1.35f;
                        break;
                    case -7:
                        multiplier = 1.4f;
                        break;
                    case -8:
                        multiplier = 1.45f;
                        break;
                    case -9:
                        multiplier = 1.5f;
                        break;
                }

                return (ushort)Math.Max(1, Convert.ToInt32(datNormalSkill.tbl[skillID].cost * multiplier));
            }

            public static float ApplyHealMultiplier(sbyte skillPotential, int heal)
            {
                //MelonLogger.Msg("Heal!");
                float multiplier = 1;

                switch (skillPotential)
                {
                    case 5:
                        multiplier = 1.5f;
                        break;
                    case 4:
                        multiplier = 1.25f;
                        break;
                    case 3:
                        multiplier = 1.25f;
                        break;
                    case 2:
                        multiplier = 1.20f;
                        break;
                    case 1:
                        multiplier = 1.15f;
                        break;
                    case -1:
                        multiplier = 1 / 1.15f;
                        break;
                    case -2:
                        multiplier = 1 / 1.20f;
                        break;
                    case -3:
                        multiplier = 1 / 1.25f;
                        break;
                    case -4:
                        multiplier = 1 / 1.35f;
                        break;
                    case -5:
                        multiplier = 1 / 1.5f;
                        break;
                }

                return heal * multiplier;
            }

            public static float ApplyDamageMultiplier(sbyte skillPotential, int damage)
            {
                //MelonLogger.Msg("ATTACKING!");
                float multiplier = 1;

                switch (skillPotential)
                {
                    case 9:
                        multiplier = 1.50f;
                        break;
                    case 8:
                        multiplier = 1.45f;
                        break;
                    case 7:
                        multiplier = 1.40f;
                        break;
                    case 6:
                        multiplier = 1.35f;
                        break;
                    case 5:
                        multiplier = 1.30f;
                        break;
                    case 4:
                        multiplier = 1.25f;
                        break;
                    case 3:
                        multiplier = 1.2f;
                        break;
                    case 2:
                        multiplier = 1.15f;
                        break;
                    case 1:
                        multiplier = 1.1f;
                        break;
                    case -1:
                        multiplier = 1 / 1.1f;
                        break;
                    case -2:
                        multiplier = 1 / 1.15f;
                        break;
                    case -3:
                        multiplier = 1 / 1.2f;
                        break;
                    case -4:
                        multiplier = 1 / 1.25f;
                        break;
                    case -5:
                        multiplier = 1 / 1.3f;
                        break;
                    case -6:
                        multiplier = 1 / 1.35f;
                        break;
                    case -7:
                        multiplier = 1 / 1.4f;
                        break;
                    case -8:
                        multiplier = 1 / 1.45f;
                        break;
                    case -9:
                        multiplier = 1 / 1.5f;
                        break;
                }

                return damage * multiplier;
            }

            public static float ApplyAilmentMultiplier(sbyte skillPotential, int luk, float ailmentRate)
            {
                //MelonLogger.Msg("INFLINCTING AILMENT!");
                float multiplier = 1;

                switch (skillPotential)
                {
                    case 9:
                        multiplier = 1.5f;
                        break;
                    case 8:
                        multiplier = 1.45f;
                        break;
                    case 7:
                        multiplier = 1.40f;
                        break;
                    case 6:
                        multiplier = 1.35f;
                        break;
                    case 5:
                        multiplier = 1.30f;
                        break;
                    case 4:
                        multiplier = 1.25f;
                        break;
                    case 3:
                        multiplier = 1.2f;
                        break;
                    case 2:
                        multiplier = 1.15f;
                        break;
                    case 1:
                        multiplier = 1.1f;
                        break;
                    case -1:
                        multiplier = 1 / 1.1f;
                        break;
                    case -2:
                        multiplier = 1 / 1.15f;
                        break;
                    case -3:
                        multiplier = 1 / 1.2f;
                        break;
                    case -4:
                        multiplier = 1 / 1.25f;
                        break;
                    case -5:
                        multiplier = 1 / 1.3f;
                        break;
                    case -6:
                        multiplier = 1 / 1.35f;
                        break;
                    case -7:
                        multiplier = 1 / 1.4f;
                        break;
                    case -8:
                        multiplier = 1 / 1.45f;
                        break;
                    case -9:
                        multiplier = 1 / 1.5f;
                        break;
                    default: break;
                }

                var lukMultiplier = 1 + ((float)luk / 100);
                return ailmentRate * multiplier * lukMultiplier;
            }
        }
    }
}